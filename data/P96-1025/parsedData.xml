<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.726399">
b&amp;apos;A New Statistical Parser Based on Bigram Lexical Dependencies
</title>
<author confidence="0.949383">
Michael John Collins*
</author>
<affiliation confidence="0.994821">
Dept. of Computer and Information Science
University of Pennsylvania
</affiliation>
<address confidence="0.886645">
Philadelphia, PA, 19104, U.S.A.
</address>
<email confidence="0.614567">
mcollins@gradient, cis.upenn,edu
</email>
<sectionHeader confidence="0.985121" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999676647058823">
This paper describes a new statistical
parser which is based on probabilities of
dependencies between head-words in the
parse tree. Standard bigram probability es-
timation techniques are extended to calcu-
late probabilities of dependencies between
pairs of words. Tests using Wall Street
Journal data show that the method per-
forms at least as well as SPATTER (Mager-
man 95; Jelinek et al. 94), which has
the best published results for a statistical
parser on this task. The simplicity of the
approach means the model trains on 40,000
sentences in under 15 minutes. With a
beam search strategy parsing speed can be
improved to over 200 sentences a minute
with negligible loss in accuracy.
</bodyText>
<sectionHeader confidence="0.998175" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.987381055555556">
Lexical information has been shown to be crucial for
many parsing decisions, such as prepositional-phrase
attachment (for example (Hindle and Rooth 93)).
However, early approaches to probabilistic parsing
(Pereira and Schabes 92; Magerman and Marcus 91;
Briscoe and Carroll 93) conditioned probabilities on
non-terminal labels and part of speech tags alone.
The SPATTER parser (Magerman 95; 3elinek et ah
94) does use lexical information, and recovers labeled
constituents in Wall Street Journal text with above
84% accuracy - as far as we know the best published
results on this task.
This paper describes a new parser which is much
simpler than SPATTER, yet performs at least as well
when trained and tested on the same Wall Street
Journal data. The method uses lexical informa-
tion directly by modeling head-modifier1 relations
between pairs of words. In this way it is similar to
</bodyText>
<footnote confidence="0.772750666666667">
*This research was supported by ARPA Grant
N6600194-C6043.
1By \&amp;apos;modifier\&amp;apos; we mean the linguistic notion of either
</footnote>
<bodyText confidence="0.96533">
an argument or adjunct.
Link grammars (Lafferty et al. 92), and dependency
grammars in general.
</bodyText>
<sectionHeader confidence="0.996187" genericHeader="method">
2 The Statistical Model
</sectionHeader>
<bodyText confidence="0.999823666666667">
The aim of a parser is to take a tagged sentence
as input (for example Figure l(a)) and produce a
phrase-structure tree as output (Figure l(b)). A
statistical approach to this problem consists of two
components. First, the statistical model assigns a
probability to every candidate parse tree for a sen-
tence. Formally, given a sentence S and a tree T, the
model estimates the conditional probability P(T[S).
The most likely parse under the model is then:
</bodyText>
<equation confidence="0.475379">
Tb~,, -- argmaxT P(TIS ) (1)
</equation>
<bodyText confidence="0.999884555555556">
Second, the parser is a method for finding Tbest.
This section describes the statistical model, while
section 3 describes the parser.
The key to the statistical model is that any tree
such as Figure l(b) can be represented as a set of
baseNPs 2 and a set of dependencies as in Fig-
ure l(c). We call the set of baseNPs B, and the
set of dependencies D; Figure l(d) shows B and D
for this example. For the purposes of our model,
</bodyText>
<equation confidence="0.998736">
T = (B, D), and:
P(TIS ) = P(B,D]S) = P(B[S) x P(D]S,B) (2)
</equation>
<bodyText confidence="0.997920071428571">
S is the sentence with words tagged for part of
speech. That is, S =&amp;lt; (wl,tl), (w2,t2)...(w~,t,) &amp;gt;.
For POS tagging we use a maximum-entropy tag-
ger described in (Ratnaparkhi 96). The tagger per-
forms at around 97% accuracy on Wall Street Jour-
nal Text, and is trained on the first 40,000 sentences
of the Penn Treebank (Marcus et al. 93).
Given S and B, the reduced sentence :~ is de-
fined as the subsequence of S which is formed by
removing punctuation and reducing all baseNPs to
their head-word alone.
~A baseNP or \&amp;apos;minimal\&amp;apos; NP is a non-recursive NP,
i.e. none of its child constituents are NPs. The term
was first used in (l:tamshaw and Marcus 95).
</bodyText>
<page confidence="0.99833">
184
</page>
<figure confidence="0.991790029411765">
\x0c(a)
John/NNP Smith/NNP, the/DT president/NN of/IN IBM/NNP, announced/VBD his/PR,P$ res-
ignation/NN yesterday/NN .
(b)
S
NP
J ~
NP NP
NP PP
A A
IN NP
NNP NNP DT NN I a
I I I I ] NNP
I
John Smith the president of IBM
VP
VBD NP NP
PRP$ NN NN
I I I
announced his resignation yesterday
(c)
[John
NP S VP VBD
Smith] [the president] of [IBM] announced [his
VP NP
vp NP I
I
resignation ] [yesterday ]
(d)
B={ [JohnSmith], [thepresident],[IBM],[hisresignation],[yesterday]}
NP S VP NP NP NP NPNPPP INPPNP VBD vP NP
D=[ Smithannounced, Smithpresident, presidentof, ofIBM, announcedresignation
VBD VP NP
announcedyesterday}
</figure>
<figureCaption confidence="0.999968">
Figure 1: An overview of the representation used by the model. (a) The tagged sentence; (b) A candidate
</figureCaption>
<bodyText confidence="0.891304375">
parse-tree (the correct one); (c) A dependency representation of (b). Square brackets enclose baseNPs
(heads of baseNPs are marked in bold). Arrows show modifier --* head dependencies. Section 2.1 describes
how arrows are labeled with non-terminal triples from the parse-tree. Non-head words within baseNPs are
excluded from the dependency structure; (d) B, the set of baseNPs, and D, the set of dependencies, are
extracted from (c).
Thus the reduced sentence is an array of word/tag
pairs, S=&amp;lt; (t~l,tl),(@2,f2)...(@r~,f,~)&amp;gt;, where
m _~ n. For example for Figure l(a)
</bodyText>
<equation confidence="0.357301">
Example 1 S =
&amp;lt; (Smith, ggP), (president,NN), (of, IN),
(IBM, NNP), (announced,VBD),
(resignation,NN), (yesterday,Ng) &amp;gt;
</equation>
<bodyText confidence="0.88306525">
Sections 2.1 to 2.4 describe the dependency model.
Section 2.5 then describes the baseNP model, which
uses bigram tagging techniques similar to (Ramshaw
and Marcus 95; Church 88).
</bodyText>
<subsectionHeader confidence="0.9924035">
2.1 The Mapping from Trees to Sets of
Dependencies
</subsectionHeader>
<bodyText confidence="0.943225222222222">
The dependency model is limited to relationships
between words in reduced sentences such as Ex-
ample 1. The mapping from trees to dependency
structures is central to the dependency model. It is
defined in two steps:
1. For each constituent P --.&amp;lt; C1...Cn&amp;gt; in the
parse tree a simple set of rules3 identifies which
of the children Ci is the \&amp;apos;head-child\&amp;apos; of P. For
example, NN would be identified as the head-child
of NP ~ &amp;lt;DET JJ 33 NN&amp;gt;, VP would be identified
as the head-child of $ -* &amp;lt;NP VP&amp;gt;. Head-words
propagate up through the tree, each parent receiv-
ing its head-word from its head-child. For example,
in S --~ &amp;lt;/~P VP&amp;gt;, S gets its head-word, announced,
3The rules are essentially the same as in (Magerman
95; Jelinek et al. 94). These rules are also used to find
the head-word of baseNPs, enabling the mapping from
S and B to S.
</bodyText>
<page confidence="0.993394">
185
</page>
<equation confidence="0.970467428571429">
\x0cfrom its head-child, the VP.
S ( ~ )
NP(Sml*h) VP(announcedl
Iq~smah) NPLmu~=nt)
J~(presidmt) PP(of) VBD(annoumzdI
NP(fesignatian) NP(yeuaerday)
NN T ~P I NN NN
</equation>
<figureCaption confidence="0.668127333333333">
Smith l~sid~t of IBM ~mounced rmign~ioe ~ y
Figure 2: Parse tree for the reduced sentence in
Example 1. The head-child of each constituent is
shown in bold. The head-word for each constituent
is shown in parentheses.
2. Head-modifier relationships are now extracted
</figureCaption>
<bodyText confidence="0.930987">
from the tree in Figure 2. Figure 3 illustrates how
each constituent contributes a set of dependency re-
lationships. VBD is identified as the head-child of
VP ---,&amp;quot; &amp;lt;VBD NP NP&amp;gt;. The head-words of the two
NPs, resignation and yesterday, both modify the
head-word of the VBD,announced. Dependencies are
labeled by the modifier non-terminal, lip in both of
these cases, the parent non-terminal, VP, and finally
the head-child non-terminal, VBD.The triple of non-
terminals at the start, middle and end of the arrow
specify the nature of the dependency relationship -
&amp;lt;liP,S,VP&amp;gt; represents a subject-verb dependency,
&amp;lt;PP ,liP ,liP&amp;gt; denotes prepositional phrase modifi-
cation of an liP, and so on4.
v ~
</bodyText>
<page confidence="0.99528">
7
</page>
<figureCaption confidence="0.997431">
Figure 3: Each constituent with n children (in this
</figureCaption>
<bodyText confidence="0.954885">
case n = 3) contributes n - 1 dependencies.
Each word in the reduced sentence, with the ex-
ception of the sentential head \&amp;apos;announced\&amp;apos;, modifies
exactly one other word. We use the notation
</bodyText>
<equation confidence="0.974763">
AF(j) = (hi, Rj) (3)
</equation>
<bodyText confidence="0.832925416666667">
to state that the jth word in the reduced sentence
is a modifier to the hjth word, with relationship
Rj 5. AF stands for \&amp;apos;arrow from\&amp;apos;. Rj is the triple
of labels at the start, middle and end of the ar-
row. For example, wl = Smith in this sentence,
4The triple can also be viewed as representing a se-
mantic predicate-argument relationship, with the three
elements being the type of the argument, result and func-
tot respectively. This is particularly apparent in Cat-
egorial Grammar formalisms (Wood 93), which make
an explicit link between dependencies and functional
application.
</bodyText>
<footnote confidence="0.7669335">
5For the head-word of the entire sentence hj = 0, with
Rj=&amp;lt;Label of the root of the parse tree &amp;gt;. So in this
</footnote>
<construct confidence="0.768881">
case, AF(5) = (0, &amp;lt; S &amp;gt;).
and ~5 = announced, so AF(1) = (5, &amp;lt;NP,S,VP&amp;gt;).
D is now defined as the m-tuple of dependen-
cies: n = {(AF(1),AF(2)...AF(m)}. The model
</construct>
<bodyText confidence="0.904843">
assumes that the dependencies are independent, so
that:
</bodyText>
<equation confidence="0.8676105">
P(DIS, B) = 11 P(AF(j)IS\&amp;apos; B) (4)
j=l
</equation>
<subsectionHeader confidence="0.998789">
2.2 Calculating Dependency Probabilities
</subsectionHeader>
<bodyText confidence="0.998496384615385">
This section describes the way P(AF(j)]S, B) is es-
timated. The same sentence is very unlikely to ap-
pear both in training and test data, so we need to
back-offfrom the entire sentence context. We believe
that lexical information is crucial to attachment de-
cisions, so it is natural to condition on the words and
tags. Let 1) be the vocabulary of all words seen in
training data, T be the set of all part-of-speech tags,
and TTCAZAf be the training set, a set of reduced
sentences. We define the following functions:
C ( (a, b/, (c, d/ ) for a, c c l], and b, d c 7- is the
number of times (a,bI and (c,d) are seen in the
same reduced sentence in training data. 6 Formally,
</bodyText>
<equation confidence="0.816255">
C((a,b&amp;gt;, &amp;lt;c,d&amp;gt;)=
Z h = &amp;lt;a,b), : &amp;lt;e,d))
~ T\&amp;apos;R,,AZ~/&amp;quot;
k,Z=l..I;I, z#k
</equation>
<bodyText confidence="0.6452805">
where h(m) is an indicator function which is 1 if mis
true, 0 if x is false.
</bodyText>
<construct confidence="0.9191503125">
C (R, (a, b), (c, d) ) is the number of times (a, b/
and (c, d) are seen in the same reduced sentence in
training data, and {a, b) modifies (c,d) with rela-
tionship R. Formally,
C (R, &amp;lt;a, b), &amp;lt;e, d) ) =
Z h(S[k] = (a,b), SIll = (c,d), AF(k) = (l,R))
- c T\&amp;apos;R~gZ2q&amp;quot;
k3_-1..1~1, l:k
(6)
F(RI(a, b), (c, d) ) is the probability that (a, b)
modifies (c, d) with relationship R, given that (a, b)
and (e, d) appear in the same reduced sentence. The
maximum-likelihood estimate of F(RI (a, b), (c, d) )
is:
C(R, (a, b), (c, d) ) (7)
fi\&amp;apos;(Rl&amp;lt;a ,b), &amp;lt;c,d))= C( (a,b), (c,d) )
</construct>
<bodyText confidence="0.973611">
We can now make the following approximation:
</bodyText>
<equation confidence="0.978284">
P(AF(j) = (hi, Rj) IS, B)
P(R I (S)
Ek=l P(P I
</equation>
<bodyText confidence="0.644345666666667">
eNote that we count multiple co-occurrences in a
single sentence, e.g. if 3=(&amp;lt;a,b&amp;gt;,&amp;lt;c,d&amp;gt;,&amp;lt;c,d&amp;gt;)
then C(&amp;lt; a,b &amp;gt;,&amp;lt; c,d &amp;gt;) = C(&amp;lt; c,d &amp;gt;,&amp;lt; a,b &amp;gt;) = 2.
</bodyText>
<page confidence="0.995625">
186
</page>
<footnote confidence="0.5138585">
\x0cwhere 79 is the set of all triples of non-terminals. The
denominator is a normalising factor which ensures
</footnote>
<equation confidence="0.934422666666667">
that
E P(AF(j) = (k,p) l S, B) = 1
k=l..rn,k~j,pe\&amp;apos;P
From (4) and (8):
P(DIS, B) ~ (9)
YT
</equation>
<bodyText confidence="0.9480955">
The denominator of (9) is constant, so maximising
P(D[S, B) over D for fixed S, B is equivalent to max-
imising the product of the numerators, Af(DIS, B).
(This considerably simplifies the parsing process):
</bodyText>
<equation confidence="0.951365">
m
N(DIS, B) = I-[ 6), Zh ) ) (10)
j=l
</equation>
<subsectionHeader confidence="0.98874">
2.3 The Distance Measure
</subsectionHeader>
<bodyText confidence="0.99623924137931">
An estimate based on the identities of the two tokens
alone is problematic. Additional context, in partic-
ular the relative order of the two words and the dis-
tance between them, will also strongly influence the
likelihood of one word modifying the other. For ex-
ample consider the relationship between \&amp;apos;sales\&amp;apos; and
the three tokens of \&amp;apos;of\&amp;apos;:
Example 2 Shaw, based in Dalton, Ga., has an-
nual sales of about $1.18 billion, and has economies
of scale and lower raw-material costs that are ex-
pected to boost the profitability of Armstrong\&amp;apos;s
brands, sold under the Armstrong and Evans-Black
names .
In this sentence \&amp;apos;sales\&amp;apos; and \&amp;apos;of\&amp;apos; co-occur three
times. The parse tree in training data indicates a
relationship in only one of these cases, so this sen-
tence would contribute an estimate of 12 that the
two words are related. This seems unreasonably low
given that \&amp;apos;sales of\&amp;apos; is a strong collocation. The lat-
ter two instances of \&amp;apos;of\&amp;apos; are so distant from \&amp;apos;sales\&amp;apos;
that it is unlikely that there will be a dependency.
This suggests that distance is a crucial variable
when deciding whether two words are related. It is
included in the model by defining an extra \&amp;apos;distance\&amp;apos;
variable, A, and extending C, F and /~ to include
this variable. For example, C( (a, b), (c, d), A) is
the number of times (a, b) and (c, d) appear in the
same sentence at a distance A apart. (11) is then
maximised instead of (10):
</bodyText>
<equation confidence="0.97304975">
rn
At(DIS, B) = 1-I P(Rj I((vj, tj), (~hj, [hj), Aj,ni)
j=l
(11)
</equation>
<bodyText confidence="0.996595">
A simple example of Aj,hj would be Aj,hj = hj - j.
However, other features of a sentence, such as punc-
tuation, are also useful when deciding if two words
are related. We have developed a heuristic \&amp;apos;dis-
tance\&amp;apos; measure which takes several such features into
account The current distance measure Aj,h~ is the
combination of 6 features, or questions (we motivate
the choice of these questions qualitatively - section 4
gives quantitative results showing their merit):
Question 1 Does the hjth word precede or follow
the jth word? English is a language with strong
word order, so the order of the two words in surface
text will clearly affect their dependency statistics.
Question 2 Are the hjth word and the jth word
adjacent? English is largely right-branching and
head-initial, which leads to a large proportion of de-
pendencies being between adjacent words 7. Table 1
shows just how local most dependencies are.
</bodyText>
<table confidence="0.9375975">
Distance 1 &amp;lt; 2 &amp;lt; 5 &amp;lt; 10
Percentage 74.2 86.3 95.6 99.0
</table>
<tableCaption confidence="0.997399">
Table 1: Percentage of dependencies vs. distance be-
</tableCaption>
<bodyText confidence="0.6375215">
tween the head words involved. These figures count
baseNPs as a single word, and are taken from WSJ
</bodyText>
<table confidence="0.850021333333333">
training data.
Number of verbs 0 &amp;lt;=1 &amp;lt;=2
Percentage 94.1 98.1 99.3
</table>
<tableCaption confidence="0.995558">
Table 2: Percentage of dependencies vs. number of
</tableCaption>
<bodyText confidence="0.971707461538462">
verbs between the head words involved.
Question 3 Is there a verb between the hjth word
and the jth word? Conditioning on the exact dis-
tance between two words by making Aj,hj = hj - j
leads to severe sparse data problems. But Table 1
shows the need to make finer distance distinctions
than just whether two words are adjacent. Consider
the prepositions \&amp;apos;to\&amp;apos;, \&amp;apos;in\&amp;apos; and \&amp;apos;of\&amp;apos; in the following
sentence:
Example 3 Oil stocks escaped the brunt of Fri-
day\&amp;apos;s selling and several were able to post gains ,
including Chevron , which rose 5/8 to 66 3//8 in
Big Board composite trading of 2.4 million shares.
The prepositions\&amp;apos; main candidates for attachment
would appear to be the previous verb, \&amp;apos;rose\&amp;apos;, and
the baseNP heads between each preposition and this
verb. They are less likely to modify a more distant
verb such as \&amp;apos;escaped\&amp;apos;. Question 3 allows the parser
to prefer modification of the most recent verb - effec-
tively another, weaker preference for right-branching
structures. Table 2 shows that 94% of dependencies
do not cross a verb, giving empirical evidence that
question 3 is useful.
ZFor example in \&amp;apos;(John (likes (to (go (to (University
(of Pennsylvania)))))))\&amp;apos; all dependencies are between ad-
jacent words.
</bodyText>
<page confidence="0.986765">
187
</page>
<bodyText confidence="0.9537883125">
\x0cQuestions 4, 5 and 6
Are there 0, 1, 2, or more than 2 \&amp;apos;commas\&amp;apos; be-
tween the hith word and the jth word? (All
symbols tagged as a \&amp;apos;,\&amp;apos; or \&amp;apos;:\&amp;apos; are considered to
be \&amp;apos;commas\&amp;apos;).
Is there a \&amp;apos;comma\&amp;apos; immediately following the
first of the hjth word and the jth word?
Is there a \&amp;apos;comma\&amp;apos; immediately preceding the
second of the hjth word and the jth word?
People find that punctuation is extremely useful
for identifying phrase structure, and the parser de-
scribed here also relies on it heavily. Commas are
not considered to be words or modifiers in the de-
pendency model - but they do give strong indica-
tions about the parse structure. Questions 4, 5 and
6 allow the parser to use this information.
</bodyText>
<subsectionHeader confidence="0.998991">
2.4 Sparse Data
</subsectionHeader>
<bodyText confidence="0.962075769230769">
The maximum likelihood estimator in (7) is
likely to be plagued by sparse data problems -
C( (,.~j, {j), (wa~,{h,), Aj,hi) may be too low to give
a reliable estimate, or worse still it may be zero leav-
ing the estimate undefined. (Collins 95) describes
how a backed-off estimation strategy is used for mak-
ing prepositional phrase attachment decisions. The
idea is to back-off to estimates based on less context.
In this case, less context means looking at the POS
tags rather than the specific words.
There are four estimates, El, E2, Ea and E4,
based respectively on: 1) both words and both tags;
2) ~j and the two POS tags; 3) ~hj and the two
</bodyText>
<equation confidence="0.9920858">
POS tags; 4) the two POS tags alone.
E1 =
where8
61 =
62 =
6a =
64 =
7]2 _7_
773 =
E2- ~ Ea= ~ E4= ~- (12)
6a 6~
c( (~,/~), (~.,,/,,, ), as,h~)
c( (/-~), &amp;lt;~h~,~-,,,), ~,~,)
C(R~, (~,~~), (/),~), ~,h~)
C(Ro,(~), (~,~.), A~,.,)
C(~, (~), .j),,~,.~) (13)
c( (~,~,~j), (~-,.j), Aj,,.j ) = ~ C( (~,j, {j), (=, ~-,.~),Aj,,,j )
xCV
c((~), &amp;lt;%), %,,,~) = ~ ~ c( &amp;lt;~,~), (y, ~,,j), A~,,,,)
xelJ y~/~
</equation>
<bodyText confidence="0.98733275">
where Y is the set of all words seen in training data: the
other definitions of C follow similarly.
Estimates 2 and 3 compete - for a given pair of
words in test data both estimates may exist and
they are equally \&amp;apos;specific\&amp;apos; to the test case example.
(Collins 95) suggests the following way of combining
them, which favours the estimate appearing more
often in training data:
</bodyText>
<equation confidence="0.967951">
E2a - \&amp;apos;12 + \&amp;apos;~a (14)
62 + 63
</equation>
<bodyText confidence="0.95176675">
This gives three estimates: El, E2a and E4, a
similar situation to trigram language modeling for
speech recognition (Jelinek 90), where there are tri-
gram, bigram and unigram estimates. (Jelinek 90)
describes a deleted interpolation method which com-
bines these estimates to give a \&amp;apos;smooth\&amp;apos; estimate,
and the model uses a variation of this idea:
If E1 exists, i.e. 61 &amp;gt; 0
</bodyText>
<equation confidence="0.986023666666667">
~(Rj I (~J,~J), (~h~,ih~), A~,h~) :
A1 x El + ( i - At) x E23 (15)
Else If Eus exists, i.e. 62 + 63 &amp;gt; 0
A2 x E23 + (1 - A2) x E4 (16)
Else
~\&amp;apos;(R~I(~.~,~)), (hj,t),j),Aj,hj) = E4 (17)
</equation>
<bodyText confidence="0.88678675">
(Jelinek 90) describes how to find A values
in (15) and (16) which maximise the likelihood of
held-out data. We have taken a simpler approach,
namely:
</bodyText>
<page confidence="0.916799">
61
</page>
<equation confidence="0.9648018">
A1 --
61+1
62 + 6a
A2 - (18)
62 + 6a + 1
</equation>
<bodyText confidence="0.996852571428572">
These AvMueshavethe desiredproperty of increas-
ing as the denominator of the more \&amp;apos;specific\&amp;apos; esti-
mator increases. We think that a proper implemen-
tation of deleted interpolation is likely to improve
results, although basing estimates on co-occurrence
counts alonehas the advantage of reduced training
times.
</bodyText>
<subsectionHeader confidence="0.832438">
2.5 The BaseNP Model
</subsectionHeader>
<bodyText confidence="0.9875916">
The overall model would be simpler if we could do
without the baseNP model and frame everything in
terms of dependencies. However the baseNP model
is needed for two reasons. First, while adjacency be-
tween words is a good indicator of whether there
is some relationship between them, this indicator
is made substantially stronger if baseNPs are re-
duced to a single word. Second, it means that
words internal to baseNPs are not included in the
co-occurrence counts in training data. Otherwise,
</bodyText>
<page confidence="0.995214">
188
</page>
<bodyText confidence="0.993971285714285">
\x0cin a phrase like \&amp;apos;The Securities and Exchange Com-
mission closed yesterday\&amp;apos;, pre-modifying nouns like
\&amp;apos;Securities\&amp;apos; and \&amp;apos;Exchange\&amp;apos; would be included in co-
occurrence counts, when in practice there is no way
that they can modify words outside their baseNP.
The baseNP model can be viewed as tagging
the gaps between words with S(tart), C(ontinue),
E(nd), B(etween) or N(ull) symbols, respectively
meaning that the gap is at the start of a BaseNP,
continues a BaseNP, is at the end of a BaseNP, is
between two adjacent baseNPs, or is between two
words which are both not in BaseNPs. We call the
gap before the ith word Gi (a sentence with n words
has n - 1 gaps). For example,
[ 3ohn Smith ] [ the president ] of [ IBM ] has an-
nounced [ his resignation ] [ yesterday ] =~
John C Smith B the C president E of S IBM E has
N announced S his C resignation B yesterday
The baseNP model considers the words directly to
the left and right of each gap, and whether there is
a comma between the two words (we write ci = 1
if there is a comma, ci = 0 otherwise). Probability
estimates are based on counts of consecutive pairs of
words in unreduced training data sentences, where
baseNP boundaries define whether gaps fall into the
S, C, E, B or N categories. The probability of
a baseNP sequence in an unreduced sentence S is
then:
</bodyText>
<equation confidence="0.9088125">
1-I P(G, I~,,_,,ti_l, wi,t,,c,) (19)
i=2...n
</equation>
<bodyText confidence="0.9990918">
The estimation method is analogous to that de-
scribed in the sparse data section of this paper. The
method is similar to that described in (Ramshaw and
Marcus 95; Church 88), where baseNP detection is
also framed as a tagging problem.
</bodyText>
<subsectionHeader confidence="0.99835">
2.6 Summary of the Model
</subsectionHeader>
<bodyText confidence="0.9605115">
The probability of a parse tree T, given a sentence
S, is:
</bodyText>
<equation confidence="0.885005">
P(T[S) = P(B, DIS) = P(BIS) x P(D[S, B)
</equation>
<bodyText confidence="0.990468111111111">
The denominator in Equation (9) is not actu-
ally constant for different baseNP sequences, hut we
make this approximation for the sake of efficiency
and simplicity. In practice this is a good approxima-
tion because most baseNP boundaries are very well
defined, so parses which have high enough P(BIS)
to be among the highest scoring parses for a sen-
tence tend to have identical or very similar baseNPs.
Parses are ranked by the following quantityg:
</bodyText>
<equation confidence="0.695792">
P(BIS) x AZ(DIS,B) (20)
</equation>
<bodyText confidence="0.986202571428571">
Equations (19) and (11) define P(B]S) and
Af(DIS, B). The parser finds the tree which max-
imises (20) subject to the hard constraint that de-
pendencies cannot cross.
9in fact we also model the set of unary productions,
U, in the tree, which are of the form P -~&amp;lt; Ca &amp;gt;. This
introduces an additional term, P(UIB,S), into (20).
</bodyText>
<subsectionHeader confidence="0.9442835">
2.7 Some Further Improvements to the
Model
</subsectionHeader>
<bodyText confidence="0.990452952380952">
This section describes two modifications which im-
prove the model\&amp;apos;s performance.
In addition to conditioning on whether depen-
dencies cross commas, a single constraint concerning
punctuation is introduced. If for any constituent Z
in the chart Z --+ &amp;lt;.. X . . &amp;gt; two of its children
X and are separated by a comma, then the last
word in must be directly followed by a comma, or
must be the last word in the sentence. In training
data 96% of commas follow this rule. The rule also
has the benefit of improving efficiency by reducing
the number of constituents in the chart.
The model we have described thus far takes the
single best sequence of tags from the tagger, and
it is clear that there is potential for better integra-
tion of the tagger and parser. We have tried two
modifications. First, the current estimation meth-
ods treat occurrences of the same word with differ-
ent POS tags as effectively distinct types. Tags can
be ignored when lexical information is available by
defining
</bodyText>
<equation confidence="0.929481">
C(a,c)= E C((a,b&amp;gt;, (c,d&amp;gt;) (21)
b,deT
</equation>
<bodyText confidence="0.999336411764706">
where 7&amp;quot; is the set of all tags. Hence C (a, c) is the
number of times that the words a and c occur in
the same sentence, ignoring their tags. The other
definitions in (13) are similarly redefined, with POS
tags only being used when backing off from lexical
information. This makes the parser less sensitive to
tagging errors.
Second, for each word wi the tagger can provide
the distribution of tag probabilities P(tiIS) (given
the previous two words are tagged as in the best
overall sequence of tags) rather than just the first
best tag. The score for a parse in equation (20) then
has an additional term, 1-[,\&amp;apos;=l P(ti IS), the product of
probabilities of the tags which it contains.
Ideally we would like to integrate POS tagging
into the parsing model rather than treating it as a
separate stage. This is an area for future research.
</bodyText>
<sectionHeader confidence="0.976753" genericHeader="method">
3 The Parsing Algorithm
</sectionHeader>
<bodyText confidence="0.999880076923077">
The parsing algorithm is a simple bottom-up chart
parser. There is no grammar as such, although
in practice any dependency with a triple of non-
terminals which has not been seen in training
data will get zero probability. Thus the parser
searches through the space of all trees with non-
terminal triples seen in training data. Probabilities
of baseNPs in the chart are calculated using (19),
while probabilities for other constituents are derived
from the dependencies and baseNPs that they con-
tain. A dynamic programming algorithm is used:
if two proposed constituents span the same set of
words, have the same label, head, and distance from
</bodyText>
<page confidence="0.99897">
189
</page>
<table confidence="0.999230166666667">
\x0cMODEL ~ 40 Words (2245 sentences) &amp;lt; 100 Words (2416 sentences) s
(1) 84.9% 84.9% 1.32 57.2% 80.8% 84.3% 84.3% 1.53 54.7% 77.8%
(2) 85.4% 85.5% 1.21 58.4% 82.4% 84.8% 84.8% 1.41 55.9% 79.4%
(3) 85.5% 85.7% 1.19 59.5% 82.6% 85.0% 85.1% 1.39 56.8% 7.9.6%
(4) 85.8% 86.3% 1.14 59.9% 83.6% 85.3% 85.7% 1.32 57.2% 80.8%
SPATTER 84.6% 84.9% 1.26 56.6% 81.4% 84.0% 84.3% 1.46 54.0% 78.8%
</table>
<tableCaption confidence="0.99955">
Table 3: Results on Section 23 of the WSJ Treebank. (1) is the basic model; (2) is the basic model
</tableCaption>
<bodyText confidence="0.991779">
with the punctuation rule described in section 2.7; (3) is model (2) with POS tags ignored when lexical
information is present; (4) is model (3) with probability distributions from the POS tagger. LI:t/LP =
labeled recall/precision. CBs is the average number of crossing brackets per sentence. 0 CBs, ~ 2 CBs
are the percentage of sentences with 0 or &amp;lt; 2 crossing brackets respectively.
</bodyText>
<figure confidence="0.975710631578947">
VBD NP
announced his resignation
Scorc=Sl Score=S2
vP
VBD NP
announced hisresignation
Score =S1*$2*
P(Gap--SIannounced,his)*
P(&amp;lt;np,vp,vbd&amp;gt;Iresignation,announced)
Distance
Measure
Yes Yes
Yes No
No Yes
Lexical
informationl LR I LP ] CBs
85.0% 85.1% 1.39
76.1% 76.6% 2.26
80.9% 83.6% 1.51
</figure>
<figureCaption confidence="0.999932">
Figure 4: Diagram showing how two constituents
</figureCaption>
<bodyText confidence="0.997487888888889">
join to form a new constituent. Each operation gives
two new probability terms: one for the baseNP gap
tag between the two constituents, and the other for
the dependency between the head words of the two
constituents.
the head to the left and right end of the constituent,
then the lower probability constituent can be safely
discarded. Figure 4 shows how constituents in the
chart combine in a bottom-up manner.
</bodyText>
<sectionHeader confidence="0.999983" genericHeader="evaluation">
4 Results
</sectionHeader>
<bodyText confidence="0.927741818181818">
The parser was trained on sections 02 - 21 of the Wall
Street Journal portion of the Penn Treebank (Mar-
cus et al. 93) (approximately 40,000 sentences), and
tested on section 23 (2,416 sentences). For compari-
son SPATTER (Magerman 95; Jelinek et al. 94) was
also tested on section 23. We use the PARSEVAL
measures (Black et al. 91) to compare performance:
Labeled Precision --
number of correct constituents in proposed parse
number of constituents in proposed parse
Labeled Recall =
number of correct constituents in proposed parse
number of constituents in treebank parse
Crossing Brackets = number
of constituents which violate constituent bound-
aries with a constituent in the treebank parse.
For a constituent to be \&amp;apos;correct\&amp;apos; it must span the
same set of words (ignoring punctuation, i.e. all to-
kens tagged as commas, colons or quotes) and have
the same label l as a constituent in the treebank
1SPATTER collapses ADVPand PRTto the same label,
for comparison we also removed this distinction when
</bodyText>
<tableCaption confidence="0.921753">
Table 4: The contribution of various components of
</tableCaption>
<bodyText confidence="0.98083">
the model. The results are for all sentences of &amp;lt; 100
words in section 23 using model (3). For \&amp;apos;no lexi-
cal information\&amp;apos; all estimates are based on POS tags
alone. For \&amp;apos;no distance measure\&amp;apos; the distance mea-
sure is Question 1 alone (i.e. whether zbj precedes
or follows ~hj).
parse. Four configurations of the parser were tested:
(1) The basic model; (2) The basic model with the
punctuation rule described in section 2.7; (3) Model
(2) with tags ignored when lexical information is
present, as described in 2.7; and (4) Model (3) also
using the full probability distributions for POS tags.
We should emphasise that test data outside of sec-
tion 23 was used for all development of the model,
avoiding the danger of implicit training on section
23. Table 3 shows the results of the tests. Table 4
shows results which indicate how different parts of
the system contribute to performance.
</bodyText>
<subsectionHeader confidence="0.982672">
4.1 Performance Issues
</subsectionHeader>
<bodyText confidence="0.999815357142857">
All tests were made on a Sun SPARCServer 1000E,
using 100% of a 60Mhz SuperSPARC processor. The
parser uses around 180 megabytes of memory, and
training on 40,000 sentences (essentially extracting
the co-occurrence counts from the corpus) takes un-
der 15 minutes. Loading the hash table of bigram
counts into memory takes approximately 8 minutes.
Two strategies are employed to improve parsing
efficiency. First, a constant probability threshold is
used while building the chart - any constituents with
lower probability than this threshold are discarded.
If a parse is found, it must be the highest ranked
parse by the model (as all constituents discarded
have lower probabilities than this parse and could
</bodyText>
<page confidence="0.959003">
190
</page>
<bodyText confidence="0.9986315625">
calculating scores.
\x0cnot, therefore, be part of a higher probability parse).
If no parse is found, the threshold is lowered and
parsing is attempted again. The process continues
until a parse is found.
Second, a beam search strategy is used. For each
span of words in the sentence the probability, Ph, of
the highest probability constituent is recorded. All
other constituents spanning the same words must
have probability greater than ~-~ for some constant
beam size /3 - constituents which fall out of this
beam are discarded. The method risks introduc-
ing search-errors, but in practice efficiency can be
greatly improved with virtually no loss of accuracy.
Table 5 shows the trade-off between speed and ac-
curacy as the beam is narrowed.
</bodyText>
<table confidence="0.6209865">
I Beam [ Speed
[ Sizefl ~Sentences/minute
</table>
<page confidence="0.891729666666667">
118
166
217
261
283
289
</page>
<tableCaption confidence="0.990275">
Table 5: The trade-off between speed and accuracy
</tableCaption>
<bodyText confidence="0.9996955">
as the beam-size is varied. Model (3) was used for
this test on all sentences &amp;lt; 100 words in section 23.
</bodyText>
<sectionHeader confidence="0.998201" genericHeader="conclusions">
5 Conclusions and Future Work
</sectionHeader>
<bodyText confidence="0.998814571428571">
We have shown that a simple statistical model
based on dependencies between words can parse
Wall Street Journal news text with high accuracy.
The method is equally applicable to tree or depen-
dency representations of syntactic structures.
There are many possibilities for improvement,
which is encouraging. More sophisticated estimation
techniques such as deleted interpolation should be
tried. Estimates based on relaxing the distance mea-
sure could also be used for smoothing- at present we
only back-off on words. The distance measure could
be extended to capture more context, such as other
words or tags in the sentence. Finally, the model
makes no account of valency.
</bodyText>
<sectionHeader confidence="0.965649" genericHeader="acknowledgments">
Acknowledgements
</sectionHeader>
<bodyText confidence="0.8375458">
I would like to thank Mitch Marcus, Jason Eisner,
Dan Melamed and Adwait Ratnaparkhi for many
useful discussions, and for comments on earlier ver-
sions of this paper. I would also like to thank David
Magerman for his help with testing SPATTER.
</bodyText>
<sectionHeader confidence="0.913359" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999374338983051">
E. Black et al. 1991. A Procedure for Quantita-
tively Comparing the Syntactic Coverage of En-
glish Grammars. Proceedings of the February 1991
DARPA Speech and Natural Language Workshop.
T. Briscoe and J. Carroll. 1993. Generalized
LR Parsing of Natural Language (Corpora)
with Unification-Based Grammars. Computa-
tional Linguistics, 19(1):25-60.
K. Church. 1988. A Stochastic Parts Program and
Noun Phrase Parser for Unrestricted Text. Second
Conference on Applied Natural Language Process-
ing, A CL.
M. Collins and J. Brooks. 1995. Prepositional Phrase
Attachment through a Backed-offModel. Proceed-
ings of the Third Workshop on Very Large Cor-
pora, pages 27-38.
D. Hindle and M. Rooth. 1993. Structural Ambigu-
ity and Lexical Relations. Computational Linguis-
tics, 19(1):103-120.
F. Jelinek. 1990. Self-organized Language Model-
ing for Speech Recognition. In Readings in Speech
Recognition. Edited by Waibel and Lee. Morgan
Kaufmann Publishers.
F. Jelinek, J. Lafferty, D. Magerman, R. Mercer, A.
Ratnaparkhi, S. Roukos. 1994. Decision Tree Pars-
ing using a Hidden Derivation Model. Proceedings
of the 1994 Human Language Technology Work-
shop, pages 272-277.
J. Lafferty, D. Sleator and, D. Temperley. 1992.
Grammatical Trigrams: A Probabilistic Model of
Link Grammar. Proceedings of the 1992 AAAI
Fall Symposium on Probabilistic Approaches to
Natural Language.
D. Magerman. 1995. Statistical Decision-Tree Mod-
els for Parsing. Proceedings of the 33rd Annual
Meeting of the Association for Computational
Linguistics, pages 276-283.
D. Magerman and M. Marcus. 1991. Pearl: A Prob-
abilistic Chart Parser. Proceedings of the 1991 Eu-
ropean A CL Conference, Berlin, Germany.
M. Marcus, B. Santorini and M. Marcinkiewicz.
1993. Building a Large Annotated Corpus of En-
glish: the Penn Treebank. Computational Linguis-
tics, 19(2):313-330.
F. Pereira and Y. Schabes. 1992. Inside-Outside
Reestimation from Partially Bracketed Corpora.
Proceedings of the 30th Annual Meeting of the
Association for Computational Linguistics, pages
128-135.
L. Ramshaw and M. Marcus. 1995. Text Chunk-
ing using Transformation-Based Learning. Pro-
ceedings of the Third Workshop on Very Large
Corpora, pages 82-94.
A. Ratnaparkhi. 1996. A Maximum Entropy Model
for Part-Of-Speech Tagging. Conference on Em-
pirical Methods in Natural Language Processing,
May 1996.
M. M. Wood. 1993. Categorial Grammars, Rout-
ledge.
</reference>
<page confidence="0.975788">
191
</page>
<figure confidence="0.254777">
\x0c&amp;apos;
</figure>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.984922">
<title confidence="0.999396">b&amp;apos;A New Statistical Parser Based on Bigram Lexical Dependencies</title>
<author confidence="0.999791">Michael John Collins</author>
<affiliation confidence="0.99989">Dept. of Computer and Information Science University of Pennsylvania</affiliation>
<address confidence="0.999668">Philadelphia, PA, 19104, U.S.A.</address>
<email confidence="0.999435">mcollins@gradient,cis.upenn,edu</email>
<abstract confidence="0.999091833333333">This paper describes a new statistical parser which is based on probabilities of dependencies between head-words in the parse tree. Standard bigram probability estimation techniques are extended to calculate probabilities of dependencies between pairs of words. Tests using Wall Street Journal data show that the method performs at least as well as SPATTER (Magerman 95; Jelinek et al. 94), which has the best published results for a statistical parser on this task. The simplicity of the approach means the model trains on 40,000 sentences in under 15 minutes. With a beam search strategy parsing speed can be improved to over 200 sentences a minute with negligible loss in accuracy.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>E Black</author>
</authors>
<title>A Procedure for Quantitatively Comparing the Syntactic Coverage of English Grammars.</title>
<date>1991</date>
<booktitle>Proceedings of the February</booktitle>
<marker>Black, 1991</marker>
<rawString>E. Black et al. 1991. A Procedure for Quantitatively Comparing the Syntactic Coverage of English Grammars. Proceedings of the February 1991 DARPA Speech and Natural Language Workshop.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Briscoe</author>
<author>J Carroll</author>
</authors>
<title>Generalized LR Parsing of Natural Language (Corpora) with Unification-Based Grammars.</title>
<date>1993</date>
<journal>Computational Linguistics,</journal>
<pages>19--1</pages>
<marker>Briscoe, Carroll, 1993</marker>
<rawString>T. Briscoe and J. Carroll. 1993. Generalized LR Parsing of Natural Language (Corpora) with Unification-Based Grammars. Computational Linguistics, 19(1):25-60.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Church</author>
</authors>
<title>A Stochastic Parts Program and Noun Phrase Parser for Unrestricted Text.</title>
<date>1988</date>
<booktitle>Second Conference on Applied Natural Language Processing, A CL.</booktitle>
<marker>Church, 1988</marker>
<rawString>K. Church. 1988. A Stochastic Parts Program and Noun Phrase Parser for Unrestricted Text. Second Conference on Applied Natural Language Processing, A CL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Collins</author>
<author>J Brooks</author>
</authors>
<title>Prepositional Phrase Attachment through a Backed-offModel.</title>
<date>1995</date>
<booktitle>Proceedings of the Third Workshop on Very Large Corpora,</booktitle>
<pages>27--38</pages>
<marker>Collins, Brooks, 1995</marker>
<rawString>M. Collins and J. Brooks. 1995. Prepositional Phrase Attachment through a Backed-offModel. Proceedings of the Third Workshop on Very Large Corpora, pages 27-38.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Hindle</author>
<author>M Rooth</author>
</authors>
<date>1993</date>
<booktitle>Structural Ambiguity and Lexical Relations. Computational Linguistics,</booktitle>
<pages>19--1</pages>
<marker>Hindle, Rooth, 1993</marker>
<rawString>D. Hindle and M. Rooth. 1993. Structural Ambiguity and Lexical Relations. Computational Linguistics, 19(1):103-120.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Jelinek</author>
</authors>
<title>Self-organized Language Modeling for Speech Recognition.</title>
<date>1990</date>
<booktitle>In Readings in Speech Recognition. Edited by Waibel</booktitle>
<publisher>Morgan Kaufmann Publishers.</publisher>
<marker>Jelinek, 1990</marker>
<rawString>F. Jelinek. 1990. Self-organized Language Modeling for Speech Recognition. In Readings in Speech Recognition. Edited by Waibel and Lee. Morgan Kaufmann Publishers.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Jelinek</author>
<author>J Lafferty</author>
<author>D Magerman</author>
<author>R Mercer</author>
<author>A Ratnaparkhi</author>
<author>S Roukos</author>
</authors>
<title>Decision Tree Parsing using a Hidden Derivation Model.</title>
<date>1994</date>
<booktitle>Proceedings of the 1994 Human Language Technology Workshop,</booktitle>
<pages>272--277</pages>
<marker>Jelinek, Lafferty, Magerman, Mercer, Ratnaparkhi, Roukos, 1994</marker>
<rawString>F. Jelinek, J. Lafferty, D. Magerman, R. Mercer, A. Ratnaparkhi, S. Roukos. 1994. Decision Tree Parsing using a Hidden Derivation Model. Proceedings of the 1994 Human Language Technology Workshop, pages 272-277.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Lafferty</author>
<author>D Sleator and</author>
<author>D Temperley</author>
</authors>
<date>1992</date>
<marker>Lafferty, and, Temperley, 1992</marker>
<rawString>J. Lafferty, D. Sleator and, D. Temperley. 1992.</rawString>
</citation>
<citation valid="false">
<title>Grammatical Trigrams: A Probabilistic Model of Link Grammar.</title>
<booktitle>Proceedings of the 1992 AAAI Fall Symposium on Probabilistic Approaches to Natural Language.</booktitle>
<marker></marker>
<rawString>Grammatical Trigrams: A Probabilistic Model of Link Grammar. Proceedings of the 1992 AAAI Fall Symposium on Probabilistic Approaches to Natural Language.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Magerman</author>
</authors>
<title>Statistical Decision-Tree Models for Parsing.</title>
<date>1995</date>
<booktitle>Proceedings of the 33rd Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>276--283</pages>
<marker>Magerman, 1995</marker>
<rawString>D. Magerman. 1995. Statistical Decision-Tree Models for Parsing. Proceedings of the 33rd Annual Meeting of the Association for Computational Linguistics, pages 276-283.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Magerman</author>
<author>M Marcus</author>
</authors>
<title>Pearl: A Probabilistic Chart Parser.</title>
<date>1991</date>
<booktitle>Proceedings of the 1991 European A CL Conference,</booktitle>
<location>Berlin, Germany.</location>
<marker>Magerman, Marcus, 1991</marker>
<rawString>D. Magerman and M. Marcus. 1991. Pearl: A Probabilistic Chart Parser. Proceedings of the 1991 European A CL Conference, Berlin, Germany.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Marcus</author>
<author>B Santorini</author>
<author>M Marcinkiewicz</author>
</authors>
<title>Building a Large Annotated Corpus of English: the Penn Treebank.</title>
<date>1993</date>
<journal>Computational Linguistics,</journal>
<pages>19--2</pages>
<marker>Marcus, Santorini, Marcinkiewicz, 1993</marker>
<rawString>M. Marcus, B. Santorini and M. Marcinkiewicz. 1993. Building a Large Annotated Corpus of English: the Penn Treebank. Computational Linguistics, 19(2):313-330.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Pereira</author>
<author>Y Schabes</author>
</authors>
<title>Inside-Outside Reestimation from Partially Bracketed Corpora.</title>
<date>1992</date>
<booktitle>Proceedings of the 30th Annual Meeting of the Association for Computational Linguistics,</booktitle>
<pages>128--135</pages>
<marker>Pereira, Schabes, 1992</marker>
<rawString>F. Pereira and Y. Schabes. 1992. Inside-Outside Reestimation from Partially Bracketed Corpora. Proceedings of the 30th Annual Meeting of the Association for Computational Linguistics, pages 128-135.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Ramshaw</author>
<author>M Marcus</author>
</authors>
<title>Text Chunking using Transformation-Based Learning.</title>
<date>1995</date>
<booktitle>Proceedings of the Third Workshop on Very Large Corpora,</booktitle>
<pages>82--94</pages>
<marker>Ramshaw, Marcus, 1995</marker>
<rawString>L. Ramshaw and M. Marcus. 1995. Text Chunking using Transformation-Based Learning. Proceedings of the Third Workshop on Very Large Corpora, pages 82-94.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Ratnaparkhi</author>
</authors>
<title>A Maximum Entropy Model for Part-Of-Speech Tagging.</title>
<date>1996</date>
<booktitle>Conference on Empirical Methods in Natural Language Processing,</booktitle>
<marker>Ratnaparkhi, 1996</marker>
<rawString>A. Ratnaparkhi. 1996. A Maximum Entropy Model for Part-Of-Speech Tagging. Conference on Empirical Methods in Natural Language Processing, May 1996.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M M Wood</author>
</authors>
<title>Categorial Grammars,</title>
<date>1993</date>
<location>Routledge.</location>
<marker>Wood, 1993</marker>
<rawString>M. M. Wood. 1993. Categorial Grammars, Routledge.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>