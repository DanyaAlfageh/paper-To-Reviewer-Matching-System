<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<bodyText confidence="0.4154315">
b&amp;apos;Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics, pages 560567,
Prague, Czech Republic, June 2007. c
</bodyText>
<sectionHeader confidence="0.362948" genericHeader="abstract">
2007 Association for Computational Linguistics
</sectionHeader>
<title confidence="0.529898">
Fast Semantic Extraction Using a Novel Neural Network Architecture
</title>
<author confidence="0.526702">
Ronan Collobert
</author>
<affiliation confidence="0.477538">
NEC Laboratories America, Inc.
</affiliation>
<address confidence="0.4408175">
4 Independence Way
Suite 200, Princeton, NJ 08540
</address>
<email confidence="0.529852">
collober@nec-labs.com
</email>
<author confidence="0.758037">
Jason Weston
</author>
<affiliation confidence="0.668454">
NEC Laboratories America, Inc.
</affiliation>
<address confidence="0.5776775">
4 Independence Way
Suite 200, Princeton, NJ 08540
</address>
<email confidence="0.710715">
jasonw@nec-labs.com
</email>
<sectionHeader confidence="0.978743" genericHeader="keywords">
Abstract
</sectionHeader>
<bodyText confidence="0.9994854">
We describe a novel neural network archi-
tecture for the problem of semantic role la-
beling. Many current solutions are compli-
cated, consist of several stages and hand-
built features, and are too slow to be applied
as part of real applications that require such
semantic labels, partly because of their use
of a syntactic parser (Pradhan et al., 2004;
Gildea and Jurafsky, 2002). Our method in-
stead learns a direct mapping from source
sentence to semantic tags for a given pred-
icate without the aid of a parser or a chun-
ker. Our resulting system obtains accuracies
comparable to the current state-of-the-art at
a fraction of the computational cost.
</bodyText>
<sectionHeader confidence="0.998166" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.957026611111111">
Semantic understanding plays an important role in
many end-user applications involving text: for infor-
mation extraction, web-crawling systems, question
and answer based systems, as well as machine trans-
lation, summarization and search. Such applications
typically have to be computationally cheap to deal
with an enormous quantity of data, e.g. web-based
systems process large numbers of documents, whilst
interactive human-machine applications require al-
most instant response. Another issue is the cost of
producing labeled training data required for statisti-
cal models, which is exacerbated when those models
also depend on syntactic features which must them-
selves be learnt.
To achieve the goal of semantic understanding,
the current consensus is to divide and conquer the
[The company]ARG0 [bought]REL [sugar]ARG1 [on the world
market]ARGM-LOC [to meet export commitments]ARGM-PNC
</bodyText>
<figureCaption confidence="0.997851">
Figure 1: Example of Semantic Role Labeling from
</figureCaption>
<bodyText confidence="0.98997736">
the PropBank dataset (Palmer et al., 2005). ARG0
is typically an actor, REL an action, ARG1 an ob-
ject, and ARGM describe various modifiers such as
location (LOC) and purpose (PNC).
problem. Researchers tackle several layers of pro-
cessing tasks ranging from the syntactic, such as
part-of-speech labeling and parsing, to the semantic:
word-sense disambiguation, semantic role-labeling,
named entity extraction, co-reference resolution and
entailment. None of these tasks are end goals in
themselves but can be seen as layers of feature ex-
traction that can help in a language-based end ap-
plication, such as the ones described above. Un-
fortunately, the state-of-the-art solutions of many of
these tasks are simply too slow to be used in the ap-
plications previously described. For example, state-
of-the-art syntactic parsers theoretically have cubic
complexity in the sentence length (Younger, 1967)1
and several semantic extraction algorithms use the
parse tree as an initial feature.
In this work, we describe a novel type of neural
network architecture that could help to solve some
of these issues. We focus our experimental study on
the semantic role labeling problem (Palmer et al.,
2005): being able to give a semantic role to a syn-
</bodyText>
<page confidence="0.91846">
1
</page>
<bodyText confidence="0.99953525">
Even though some parsers effectively exhibit linear be-
havior in sentence length (Ratnaparkhi, 1997), fast statistical
parsers such as (Henderson, 2004) still take around 1.5 seconds
for sentences of length 35 in tests that we made.
</bodyText>
<page confidence="0.976415">
560
</page>
<bodyText confidence="0.999657512820513">
\x0ctactic constituent of a sentence, i.e. annotating the
predicate argument structure in text (see for exam-
ple Figure 1). Because of its nature, role labeling
seems to require the syntactic analysis of a sentence
before attributing semantic labels. Using this intu-
ition, state-of-the-art systems first build a parse tree,
and syntactic constituents are then labeled by feed-
ing hand-built features extracted from the parse tree
to a machine learning system, e.g. the ASSERT sys-
tem (Pradhan et al., 2004). This is rather slow, tak-
ing a few seconds per sentence at test time, partly
because of the parse tree component, and partly be-
cause of the use of Support Vector Machines (Boser
et al., 1992), which have linear complexity in test-
ing time with respect to the number of training ex-
amples. This makes it hard to apply this method to
interesting end user applications.
Here, we propose a radically different approach
that avoids the more complex task of building a full
parse tree. From a machine learning point of view, a
human does not need to be taught about parse trees
to talk. It is possible, however, that our brains may
implicitly learn features highly correlated with those
extracted from a parse tree. We propose to develop
an architecture that implements this kind of implicit
learning, rather than using explicitly engineered fea-
tures. In practice, our system also provides semantic
tags at a fraction of the computational cost of other
methods, taking on average 0.02 seconds to label a
sentence from the Penn Treebank, with almost no
loss in accuracy.
The rest of the article is as follows. First, we de-
scribe the problem of shallow semantic parsing in
more detail, as well as existing solutions to this prob-
lem. We then detail our algorithmic approach the
neural network architecture we employ followed
by experiments that evaluate our method. Finally,
we conclude with a summary and discussion of fu-
ture work.
</bodyText>
<sectionHeader confidence="0.945236" genericHeader="method">
2 Shallow Semantic Parsing
</sectionHeader>
<bodyText confidence="0.99363708">
FrameNet (Baker et al., 1998) and the Proposition
Bank (Palmer et al., 2005), or PropBank for short,
are the two main systems currently developed for
semantic role-labeling annotation. We focus here
on PropBank. PropBank encodes role labels by se-
mantically tagging the syntactic structures of hand
annotated parses of sentences. The current version
of the dataset gives semantic tags for the same sen-
tences as in the Penn Treebank (Marcus et al., 1993),
which are excerpts from the Wall Street Journal. The
central idea is that each verb in a sentence is la-
beled with its propositional arguments, where the
abstract numbered arguments are intended to fill typ-
ical roles. For example, ARG0 is typically the actor,
and ARG1 is typically the thing acted upon. The
precise usage of the numbering system is labeled for
each particular verb as so-called frames. Addition-
ally, semantic roles can also be labeled with one of
13 ARGM adjunct labels, such as ARGM-LOC or
ARGM-TMP for additional locational or temporal
information relative to some verb.
Shallow semantic parsing has immediate applica-
tions in tasks such as meta-data extraction (e.g. from
web documents) and question and answer based sys-
tems (e.g. call center systems), amongst others.
</bodyText>
<sectionHeader confidence="0.997261" genericHeader="method">
3 Previous Work
</sectionHeader>
<bodyText confidence="0.996635130434783">
Several authors have already attempted to build ma-
chine learning approaches for the semantic role-
labeling problem. In (Gildea and Jurafsky, 2002)
the authors presented a statistical approach to learn-
ing (for FrameNet), with some success. They pro-
posed to take advantage of the syntactic tree struc-
ture that can be predicted by a parser, such as Char-
niaks parser (Charniak, 2000). Their aim is, given
a node in the parse tree, to assign a semantic role
label to the words that are the children of that node.
They extract several key types of features from the
parse tree to be used in a statistical model for pre-
diction. These same features also proved crucial to
subsequent approaches, e.g. (Pradhan et al., 2004).
These features include:
The parts of speech and syntactic labels of
words and nodes in the tree.
The nodes position (left or right) in relation to
the verb.
The syntactic path to the verb in the parse tree.
Whether a node in the parse tree is part of a
noun or verb phrase (by looking at the parent
nodes of that node).
</bodyText>
<page confidence="0.993591">
561
</page>
<bodyText confidence="0.995258186440678">
\x0c The voice of the sentence: active or passive
(part of the PropBank gold annotation);
as well as several other features (predicate, head
word, verb sub-categorization, . .. ).
The authors of (Pradhan et al., 2004) used a
similar structure, but added more features, notably
head word part-of-speech, the predicted named en-
tity class of the argument, word sense disambigua-
tion of the verb and verb clustering, and others (they
add 25 variants of 12 new feature types overall.)
Their system also uses a parser, as before, and then a
polynomial Support Vector Machine (SVM) (Boser
et al., 1992) is used in two further stages: to clas-
sify each node in the tree as being a semantic ar-
gument or not for a given verb; and then to clas-
sify each semantic argument into one of the classes
(ARG1, ARG2, etc.). The first SVM solves a two-
class problem, the second solves a multi-class prob-
lem using a one-vs-the-rest approach. The final sys-
tem, called ASSERT, gives state-of-the-art perfor-
mance and is also freely available at: http://
oak.colorado.edu/assert/. We compare
to this system in our experimental results in Sec-
tion 5. Several other competing methods exist, e.g.
the ones that participated in the CONLL 2004 and
2005 challenges (http://www.lsi.upc.edu/
srlconll/st05/st05.html). In this paper
we focus on a comparison with ASSERT because
software to re-run it is available online. This also
gives us a timing result for comparison purposes.
The three-step procedure used in ASSERT (calcu-
lating a parse tree and then applying SVMs twice)
leads to good classification performance, but has
several drawbacks. First in speed: predicting a
parse tree is extremely demanding in computing re-
sources. Secondly, choosing the features necessary
for SVM classification requires extensive research.
Finally, the SVM classification algorithm used in ex-
isting approaches is rather slow: SVM training is at
least quadratic in time with respect to the number
of training examples. The number of support vec-
tors involved in the SVM decision function also in-
creases linearly with the number of training exam-
ples. This makes SVMs slow on large-scale prob-
lems, both during training and testing phases.
To alleviate the burden of parse tree computation,
several attempts have been made to remove the full
parse tree information from the semantic role label-
ing system, in fact the shared task of CONLL 2004
was devoted to this goal, but the results were not
completely satisfactory. Previously, in (Gildea and
Palmer, 2001), the authors tried to show that the
parse tree is necessary for good generalization by
showing that segments derived from a shallow syn-
tactic parser or chunker do not perform as well for
this goal. A further analysis of using chunkers, with
improved results was also given in (Punyakanok et
al., 2005), but still concluded the full parse tree is
most useful.
</bodyText>
<sectionHeader confidence="0.98788" genericHeader="method">
4 Neural Network Architecture
</sectionHeader>
<bodyText confidence="0.999913642857143">
Ideally, we want an end-to-end fast learning system
to output semantic roles for syntactic constituents
without using a time consuming parse tree.
Also, as explained before, we are interesting in
exploring whether machine learning approaches can
learn structure implicitly. Hence, even if there is a
deep relationship between syntax and semantics, we
prefer to avoid hand-engineered features that exploit
this, and see if we can develop a model that can learn
these features instead. We are thus not interested
in chunker-based techniques, even though they are
faster than parser-based techniques.
We propose here a neural network based architec-
ture which achieves these two goals.
</bodyText>
<subsectionHeader confidence="0.997564">
4.1 Basic Architecture
</subsectionHeader>
<bodyText confidence="0.998649666666667">
The type of neural network that we employ is a Multi
Layer Perceptron (MLP). MLPs have been used for
many years in the machine learning field and slowly
abandoned for several reasons: partly because of
the difficulty of solving the non-convex optimization
problems associated with learning (LeCun et al.,
1998), and partly because of the difficulty of their
theoretical analysis compared to alternative convex
approaches.
An MLP works by successively projecting the
data to be classified into different spaces. These
projections are done in what is called hidden lay-
ers. Given an input vector z, a hidden layer applies
a linear transformation (matrix M) followed by a
squashing function h:
</bodyText>
<equation confidence="0.945636">
z 7 Mz 7 h(Mz) . (1)
</equation>
<page confidence="0.97032">
562
</page>
<bodyText confidence="0.963304111111111">
\x0cA typical squashing function is the hyperbolic tan-
gent h() = tanh(). The last layer (the output
layer) linearly separates the classes. The composi-
tion of the projections in the hidden layers could be
viewed as the work done by the kernel in SVMs.
However there is a very important difference: the
kernel in SVM is fixed and arbitrarily chosen, while
the hidden layers in an MLP are trained and adapted
to the classification task. This allows us to create
much more flexible classification architectures.
Our method for semantic role labeling classifies
each word of a sentence separately. We do not use
any semantic constituent information: if the model
is powerful enough, words in the same semantic
constituent should have the same class label. This
means we also do not separate the problem into
an identification and classification phase, but rather
solve in a single step.
</bodyText>
<subsubsectionHeader confidence="0.927164">
4.1.1 Notation
</subsubsectionHeader>
<bodyText confidence="0.9930105">
We represent words as indices. We consider a fi-
nite dictionary of words D N. Let us represent a
sentence of nw words to be analyzed as a function
s(). The ith word in the sentence is given by the
</bodyText>
<equation confidence="0.6268895">
index s(i):
1 i nw s(i) D .
</equation>
<bodyText confidence="0.9508233">
We are interested in predicting the semantic role la-
bel of the word at position posw, given a verb at po-
sition posv (1 posw, posv nw). A mathemati-
cal description of our network architecture schemat-
ically shown in Figure 2 follows.
4.1.2 Transforming words into feature vectors
Our first concern in semantic role labeling is that
we have to deal with words, and that a simple in-
dex i D does not carry any information specific
to a word: for each word we need a set of features
relevant for the task. As described earlier, previous
methods construct a parse tree, and then compute
hand-built features which are then fed to a classi-
fication algorithm. In order to bypass the use of a
parse tree, we convert each word i D into a par-
ticular vector wi Rd which is going to be learnt
for the task we are interested in. This approach has
already been used with great success in the domain
of language models (Bengio and Ducharme, 2001;
Schwenk and Gauvain, 2002).
</bodyText>
<figure confidence="0.97225564">
0
0
1
1 0
1 0
1 0
0
1
1
Lookup Table d
...
d
Linear Layer with sentenceadapted columns
d
C(position w.r.t. cat, position w.r.t. sat)
Softmax Squashing Layer
...
ARG1 ARG2 ARGM
LOC
ARGM
TMP
Classical Linear Layer
Tanh Squashing Layer
nhu
Ci
</figure>
<equation confidence="0.863391769230769">
ws(6)
ws(2)
s(1)
w
...
C1 C2 C6
Classical Linear Layer
ws(6)
...
ws(2)
s(1)
w
s(1) s(2) ... s(6)
</equation>
<figure confidence="0.8450282">
sat
the
Input Sentence
on the mat
cat
</figure>
<figureCaption confidence="0.993535">
Figure 2: MLP architecture for shallow semantic
</figureCaption>
<bodyText confidence="0.957867857142857">
parsing. The input sequence is at the top. The out-
put class probabilities for the word of interest (cat)
given the verb of interest (sat) are given at the bot-
tom.
The first layer of our MLP is thus a lookup table
which replaces the word indices into a concatenation
of vectors:
</bodyText>
<equation confidence="0.9520305">
{s(1), . . . , s(nw)}
7 (ws(1) . . . ws(nw)) Rnw d .
</equation>
<bodyText confidence="0.9219412">
(2)
The weights {wi  |i D} for this layer are consid-
ered during the backpropagation phase of the MLP,
and thus adapted automatically for the task we are
interested in.
</bodyText>
<subsubsectionHeader confidence="0.67726">
4.1.3 Integrating the verb position
</subsubsectionHeader>
<bodyText confidence="0.975508">
Feeding word vectors alone to a linear classifica-
tion layer as in (Bengio and Ducharme, 2001) leads
</bodyText>
<page confidence="0.986945">
563
</page>
<bodyText confidence="0.984658428571429">
\x0cto very poor accuracy because the semantic classifi-
cation of a given word also depends on the verb in
question. We need to provide the MLP with infor-
mation about the verb position within the sentence.
For that purpose we use a kind of linear layer which
is adapted to the sentence considered. It takes the
form:
</bodyText>
<equation confidence="0.997592555555555">
(ws(1) . . . ws(nw)) 7 M
wT
s(1)
.
.
.
wT
s(nw)
,
</equation>
<bodyText confidence="0.980478">
where M Rnhunw d, and nhu is the number of
hidden units. The specific nature of this layer is
that the matrix M has a special block-column form
which depends on the sentence:
</bodyText>
<equation confidence="0.99693">
M = (C1 |. . . |Cnw ) ,
</equation>
<bodyText confidence="0.9611525">
where each column Ci Rnhud depends on the
position of the ith word in s(), with respect to the
position posw of the word of interest, and with re-
spect to the position posv of the verb of interest:
</bodyText>
<equation confidence="0.728881">
Ci = C(i posw, i posv) ,
</equation>
<bodyText confidence="0.983501684210526">
where C(, ) is a function to be chosen.
In our experiments C(, ) was a linear layer with
discretized inputs (i posw, i posv) which were
transformed into two binary vectors of size wsz,
where a bit is set to 1 if it corresponds to the po-
sition to encode, and 0 otherwise. These two binary
vectors are then concatenated and fed to the linear
layer. We chose the window size wsz = 11. If
a position lies outside the window, then we still set
the leftmost or rightmost bit to 1. The parameters in-
volved in this function are also considered during the
backpropagation. With such an architecture we al-
low our MLP to automatically adapt the importance
of a word in the sentence given its distance to the
word we want to classify, and to the verb we are in-
terested in.
This idea is the major novelty in this work, and is
crucial for the success of the entire architecture, as
we will see in the experiments.
</bodyText>
<subsubsectionHeader confidence="0.865498">
4.1.4 Learning class probabilities
</subsubsectionHeader>
<bodyText confidence="0.998949666666667">
The last layer in our MLP is a classical linear
layer as described in (1), with a softmax squashing
function (Bridle, 1990). Considering (1) and given
</bodyText>
<equation confidence="0.993138666666667">
z = Mz, we have
hi(z) =
exp zi
P
j exp zj
.
</equation>
<bodyText confidence="0.99810175">
This allows us to interpret outputs as probabilities
for each semantic role label. The training of the
whole system is achieved using a normal stochastic
gradient descent.
</bodyText>
<subsectionHeader confidence="0.995986">
4.2 Word representation
</subsectionHeader>
<bodyText confidence="0.999481133333333">
As we have seen, in our model we are learning one
d dimensional vector to represent each word. If the
dataset were large enough, this would be an elegant
solution. In practice many words occur infrequently
within PropBank, so (independent of the size of d)
we can still only learn a very poor representation for
words that only appear a few times. Hence, to con-
trol the capacity of our model we take the original
word and replace it with its part-of-speech if it is
a verb, noun, adjective, adverb or number as deter-
mined by a part-of-speech classifier, and keep the
words for all other parts of speech. This classifier is
itself a neural network. This way we keep linking
words which are important for this task. We do not
do this replacement for the predicate itself.
</bodyText>
<sectionHeader confidence="0.999055" genericHeader="evaluation">
5 Experiments
</sectionHeader>
<bodyText confidence="0.96818025">
We used Sections 02-21 of the PropBank dataset
version 1 for training and validation and Section
23 for testing as standard in all our experiments.
We first describe the part-of-speech tagger we em-
ploy, and then describe our semantic role labeling
experiments. Software for our method, SENNA (Se-
mantic Extraction using a Neural Network Archi-
tecture), more details on its implementation, an on-
line applet and test set predictions of our system
in comparison to ASSERT can be found at http:
//ml.nec-labs.com/software/senna.
Part-Of-Speech Tagger The part-of-speech clas-
sifier we employ is a neural network architecture of
the same type as in Section 4, where the function
Ci = C(i posw) depends now only on the word
position, and not on a verb. More precisely:
</bodyText>
<equation confidence="0.8398195">
Ci =
\x1a
0 if 2 |i posw |&gt; wsz 1
Wiposw otherwise ,
</equation>
<page confidence="0.987395">
564
</page>
<bodyText confidence="0.992232807017544">
\x0cwhere Wk Rnhud and wsz is a window size.
We chose wsz = 5 in our experiments. The
d-dimensional vectors learnt take into account the
capitalization of a word, and the prefix and suf-
fix calculated using Porter-Stemmer. See http:
//ml.nec-labs.com/software/senna for
more details. We trained on the training set of Prop-
Bank supplemented with the Brown corpus, result-
ing in a test accuracy on the test set of PropBank of
96.85% which compares to 96.66% using the Brill
tagger (Brill, 1992).
Semantic Role Labeling In our experiments we
considered a 23-class problem of NULL (no la-
bel), the core arguments ARG0-5, REL, ARGA, and
ARGM- along with the 13 secondary modifier labels
such as ARGM-LOC and ARGM-TMP. We simpli-
fied R-ARGn and C-ARGn to be written as ARGn,
and post-processed ASSERT to do this as well.
We compared our system to the freely available
ASSERT system (Pradhan et al., 2004). Both sys-
tems are fed only the input sentence during testing,
with traces removed, so they cannot make use of
many PropBank features such as frameset identiti-
fier, person, tense, aspect, voice, and form of the
verb. As our algorithm outputs a semantic tag for
each word of a sentence, we directly compare this
per-word accuracy with ASSERT. Because ASSERT
uses a parser, and because PropBank was built by la-
beling the nodes of a hand-annotated parse tree, per-
node accuracy is usually reported in papers such as
(Pradhan et al., 2004). Unfortunately our approach
is based on a completely different premise: we tag
words, not syntactic constituents coming from the
parser. We discuss this further in Section 5.2.
The per-word accuracy comparison results can be
seen in Table 5. Before labeling the semantic roles
of each predicate, one must first identify the pred-
icates themselves. If a predicate is not identified,
NULL tags are assigned to each word for that pred-
icate. The first line of results in the table takes into
account this identification process. For the neural
network, we used our part-of-speech tagger to per-
form this as a verb-detection task.
We noticed ASSERT failed to identify relatively
many predicates. In particular, it seems predicates
such as is are sometimes labeled as AUX by
the part-of-speech tagger, and subsequently ignored.
We informed the authors of this, but we did not re-
ceive a response. To deal with this, we considered
the additional accuracy (second row in the table)
measured over only those sentences where the pred-
icate was identified by ASSERT.
Timing results The per-sentence compute time is
also given in Table 5, averaged over all sentences in
the test set. Our method is around 250 times faster
than ASSERT. It is not really feasible to run AS-
SERT for most applications.
</bodyText>
<table confidence="0.960982571428571">
Measurement NN ASSERT
Per-word accuracy
(all verbs) 83.64% 83.46%
Per-word accuracy
(ASSERT verbs) 84.09% 86.06%
Per-sentence
compute time (secs) 0.02 secs 5.08 secs
</table>
<tableCaption confidence="0.99942">
Table 1: Experimental comparison with ASSERT
</tableCaption>
<subsectionHeader confidence="0.999044">
5.1 Analysis of our MLP
</subsectionHeader>
<bodyText confidence="0.999315666666667">
While we gave an intuitive justification of the archi-
tecture choices of our model in Section 4, we now
give a systematic empirical study of those choices.
First of all, providing the position of the word and
the predicate in function C(, ) is essential: the best
model we obtained with a window around the word
only gave 51.3%, assuming correct identification of
all predicates. Our best model achieves 83.95% in
this setting.
If we do not cluster the words according to their
part-of-speech, we also lose some performance, ob-
taining 78.6% at best. On the other hand, clustering
all words (such as CC, DT, IN part-of-speech tags)
also gives weaker results (81.1% accuracy at best).
We believe that including all words would give very
good performance if the dataset was large enough,
but training only on PropBank leads to overfitting,
many words being infrequent. Clustering is a way
to fight against overfitting, by grouping infrequent
words: for example, words with the label NNP, JJ,
RB (which we cluster) appear on average 23, 22 and
72 times respectively in the training set, while CC,
DT, IN (which we do not cluster) appear 2420, 5659
and 1712 times respectively.
</bodyText>
<page confidence="0.987387">
565
</page>
<bodyText confidence="0.997806777777778">
\x0cEven though some verbs are infrequent, one can-
not cluster all verbs into a single group, as each verb
dictates the types of semantic roles in the sentence,
depending on its frame. Clustering all words into
their part-of-speech, including the predicate, gives
a poor 73.8% compared with 81.1%, where every-
thing is clustered apart from the predicate.
Figure 3 gives some anecdotal examples of test set
predictions of our final model compared to ASSERT.
</bodyText>
<subsectionHeader confidence="0.996201">
5.2 Argument Classification Accuracy
</subsectionHeader>
<bodyText confidence="0.999619611111111">
So far we have not used the same accuracy measures
as in previous work (Gildea and Jurafsky, 2002;
Pradhan et al., 2004). Currently our architecture is
designed to label on a per-word basis, while existing
systems perform a segmentation process, and then
label segments. While we do not optimize our model
for the same criteria, it is still possible to measure the
accuracy using the same metrics. We measured the
argument classification accuracy of our network, as-
suming the correct segmentation is given to our sys-
tem, as in (Pradhan et al., 2004), by post-processing
our per-word tags to form a majority vote over each
segment. This gives 83.18% accuracy for our net-
work when we suppose the predicate must also be
identified, and 80.53% for the ASSERT software.
Measuring only on predicates identified by ASSERT
we instead obtain 84.32% accuracy for our network,
and 87.02% for ASSERT.
</bodyText>
<sectionHeader confidence="0.998343" genericHeader="conclusions">
6 Discussion
</sectionHeader>
<bodyText confidence="0.934817671641791">
We have introduced a neural network architecture
that can provide computationally efficient semantic
role tagging. It is also a general architecture that
could be applied to other problems as well. Because
our network currently outputs labels on a per-word
basis it is difficult to assess existing accuracy mea-
sures. However, it should be possible to combine
our approach with a shallow parser to enhance per-
formance, and make comparisons more direct.
We consider this work as a starting point for dif-
ferent research directions, including the following
areas:
Incorporating hand-built features Currently,
the only prior knowledge our system encodes
comes from part-of-speech tags, in stark con-
trast to other methods. Of course, performance
TRUTH: He camped out at a high-tech nerve center
on the floor of [the Big Board, where]ARGM-LOC [he]ARG0
[could]ARGM-MOD [watch]REL [updates on prices and pend-
ing stock orders]ARG1.
ASSERT (68.7%): He camped out at a high-tech nerve
center on the floor of the Big Board, [ where]ARGM-LOC
[he]ARG0 [could]ARGM-MOD [watch]REL [updates]ARG1 on
prices and pending stock orders.
NN (100%): He camped out at a high-tech nerve center
on the floor of [the Big Board, where]ARGM-LOC [he]ARG0
[could]ARGM-MOD [watch]REL [updates on prices and pend-
ing stock orders]ARG1.
TRUTH: [United Auto Workers Local 1069, which]ARG0
[represents]REL [3,000 workers at Boeings helicopter unit
in Delaware County, Pa.]ARG1 , said it agreed to extend its
contract on a day-by-day basis, with a 10-day notification
to cancel, while it continues bargaining.
ASSERT (100%): [United Auto Workers Local 1069,
which]ARG0 [represents]REL [3,000 workers at Boeings
helicopter unit in Delaware County, Pa.]ARG1 , said it agreed
to extend its contract on a day-by-day basis, with a 10-day
notification to cancel, while it continues bargaining.
NN (89.1%): [United Auto Workers Local 1069,
which]ARG0 [represents]REL [3,000 workers at Boeings
helicopter unit]ARG1 [ in Delaware County]ARGM-LOC , Pa. ,
said it agreed to extend its contract on a day-by-day basis,
with a 10-day notification to cancel, while it continues
bargaining.
Figure 3: Two examples from the PropBank test set,
showing Neural Net and ASSERT and gold standard
labelings, with per-word accuracy in brackets. Note
that even though our labeling does not match the
hand-annotated one in the second sentence it still
seems to make some sense as in Delaware County
is labeled as a location modifier. The complete set
of predictions on the test set can be found at http:
//ml.nec-labs.com/software/senna.
would improve with more hand-built features.
For example, simply adding whether each word
is part of a noun or verb phrase using the hand-
annotated parse tree (the so-called GOV fea-
ture from (Gildea and Jurafsky, 2002)) im-
proves the performance of our system from
83.95% to 85.8%. One must trade the gener-
ality of the model with its specificity, and also
take into account how long the features take to
compute.
Incorporating segment information Our system
has no prior knowledge about segmentation in
text. This could be encoded in many ways:
most obviously by using a chunker, but also by
</bodyText>
<page confidence="0.980674">
566
</page>
<bodyText confidence="0.995796852941176">
\x0cdesigning a different network architecture, e.g.
by encoding contiguity constraints. To show
the latter is useful, using hand-annotated seg-
ments to force contiguity by majority vote leads
to an improvement from 83.95% to 85.6%.
Incorporating known invariances via virtual
training data. In image recognition problems
it is common to create artificial training data by
taking into account invariances in the images,
e.g. via rotation and scale. Such data improves
generalization substantially. It may be possible
to achieve similar results for text, by warp-
ing training data to create new sentences, or
by constructing sentences from scratch using a
hand-built grammar.
Unlabeled data. Our representation of words
is as d dimensional vectors. We could try to
improve this representation by learning a lan-
guage model from unlabeled data (Bengio and
Ducharme, 2001). As many words in Prop-
Bank only appear a few times, the representa-
tion might improve, even though the learning is
unsupervised. This may also make the system
generalize better to types of data other than the
Wall Street Journal.
Transductive Inference. Finally, one can also
use unlabeled data as part of the supervised
training process, which is called transduction
or semi-supervised learning.
In particular, we find the possibility of using un-
labeled data, invariances and the use of transduc-
tion exciting. These possibilities naturally fit into
our framework, whereas scalability issues will limit
their application in competing methods.
</bodyText>
<sectionHeader confidence="0.991875" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.993094683333333">
C.F. Baker, C.J. Fillmore, and J.B. Lowe. 1998. The
Berkeley FrameNet project. Proceedings of COLING-
ACL, 98.
Y. Bengio and R. Ducharme. 2001. A neural probabilis-
tic language model. In Advances in Neural Informa-
tion Processing Systems, NIPS 13.
B.E. Boser, I.M. Guyon, and V.N. Vapnik. 1992. A train-
ing algorithm for optimal margin classifiers. Proceed-
ings of the fifth annual workshop on Computational
learning theory, pages 144152.
J.S. Bridle. 1990. Probabilistic interpretation of feed-
forward classification network outputs, with relation-
ships to statistical pattern recognition. In F. Fogelman
Soulie and J. Herault, editors, Neurocomputing: Al-
gorithms, Architectures and Applications, pages 227
236. NATO ASI Series.
E. Brill. 1992. A simple rule-based part of speech tag-
ger. Proceedings of the Third Conference on Applied
Natural Language Processing, pages 152155.
E. Charniak. 2000. A maximum-entropy-inspired parser.
Proceedings of the first conference on North American
chapter of the Association for Computational Linguis-
tics, pages 132139.
D. Gildea and D. Jurafsky. 2002. Automatic label-
ing of semantic roles. Computational Linguistics,
28(3):245288.
D. Gildea and M. Palmer. 2001. The necessity of pars-
ing for predicate argument recognition. Proceedings
of the 40th Annual Meeting on Association for Com-
putational Linguistics, pages 239246.
J. Henderson. 2004. Discriminative training of a neural
network statistical parser. In Proceedings of the 42nd
Meeting of Association for Computational Linguistics.
Y. LeCun, L. Bottou, G. B. Orr, and K.-R. Muller. 1998.
Efficient backprop. In G.B. Orr and K.-R. Muller, ed-
itors, Neural Networks: Tricks of the Trade, pages 9
50. Springer.
M.P. Marcus, M.A. Marcinkiewicz, and B. Santorini.
1993. Building a large annotated corpus of En-
glish: the penn treebank. Computational Linguistics,
19(2):313330.
M. Palmer, D. Gildea, and P. Kingsbury. 2005. The
proposition bank: An annotated corpus of semantic
roles. Comput. Linguist., 31(1):71106.
S. Pradhan, W. Ward, K. Hacioglu, J. Martin, and D. Ju-
rafsky. 2004. Shallow semantic parsing using support
vector machines. Proceedings of HLT/NAACL-2004.
V. Punyakanok, D. Roth, and W. Yih. 2005. The ne-
cessity of syntactic parsing for semantic role labeling.
Proceedings of IJCAI05, pages 11171123.
A. Ratnaparkhi. 1997. A linear observed time statistical
parser based on maximum entropy models. Proceed-
ings of EMNLP.
H. Schwenk and J.L. Gauvain. 2002. Connection-
ist language modeling for large vocabulary continu-
ousspeech recognition. Proceedings of ICASSP02.
D. H. Younger. 1967. Recognition and parsing of
context-free languages in time n3
. Information and
Control, 10.
</reference>
<page confidence="0.956004">
567
</page>
<figure confidence="0.265102">
\x0c&amp;apos;
</figure>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.765755">
<note confidence="0.940493666666667">b&amp;apos;Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics, pages 560567, Prague, Czech Republic, June 2007. c 2007 Association for Computational Linguistics</note>
<title confidence="0.966307">Fast Semantic Extraction Using a Novel Neural Network Architecture</title>
<author confidence="0.995918">Ronan Collobert</author>
<affiliation confidence="0.998432">NEC Laboratories America, Inc.</affiliation>
<address confidence="0.996352">4 Independence Way Suite 200, Princeton, NJ 08540</address>
<email confidence="0.999555">collober@nec-labs.com</email>
<author confidence="0.999871">Jason Weston</author>
<affiliation confidence="0.995751">NEC Laboratories America, Inc.</affiliation>
<address confidence="0.9968505">4 Independence Way Suite 200, Princeton, NJ 08540</address>
<email confidence="0.999802">jasonw@nec-labs.com</email>
<abstract confidence="0.9967973125">We describe a novel neural network architecture for the problem of semantic role labeling. Many current solutions are complicated, consist of several stages and handbuilt features, and are too slow to be applied as part of real applications that require such semantic labels, partly because of their use of a syntactic parser (Pradhan et al., 2004; Gildea and Jurafsky, 2002). Our method instead learns a direct mapping from source sentence to semantic tags for a given predicate without the aid of a parser or a chunker. Our resulting system obtains accuracies comparable to the current state-of-the-art at a fraction of the computational cost.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>C F Baker</author>
<author>C J Fillmore</author>
<author>J B Lowe</author>
</authors>
<title>The Berkeley FrameNet project.</title>
<date>1998</date>
<booktitle>Proceedings of COLINGACL,</booktitle>
<pages>98</pages>
<contexts>
<context position="5546" citStr="Baker et al., 1998" startWordPosition="871" endWordPosition="874">r system also provides semantic tags at a fraction of the computational cost of other methods, taking on average 0.02 seconds to label a sentence from the Penn Treebank, with almost no loss in accuracy. The rest of the article is as follows. First, we describe the problem of shallow semantic parsing in more detail, as well as existing solutions to this problem. We then detail our algorithmic approach the neural network architecture we employ followed by experiments that evaluate our method. Finally, we conclude with a summary and discussion of future work. 2 Shallow Semantic Parsing FrameNet (Baker et al., 1998) and the Proposition Bank (Palmer et al., 2005), or PropBank for short, are the two main systems currently developed for semantic role-labeling annotation. We focus here on PropBank. PropBank encodes role labels by semantically tagging the syntactic structures of hand annotated parses of sentences. The current version of the dataset gives semantic tags for the same sentences as in the Penn Treebank (Marcus et al., 1993), which are excerpts from the Wall Street Journal. The central idea is that each verb in a sentence is labeled with its propositional arguments, where the abstract numbered argu</context>
</contexts>
<marker>Baker, Fillmore, Lowe, 1998</marker>
<rawString>C.F. Baker, C.J. Fillmore, and J.B. Lowe. 1998. The Berkeley FrameNet project. Proceedings of COLINGACL, 98.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Y Bengio</author>
<author>R Ducharme</author>
</authors>
<title>A neural probabilistic language model.</title>
<date>2001</date>
<booktitle>In Advances in Neural Information Processing Systems, NIPS 13.</booktitle>
<contexts>
<context position="14172" citStr="Bengio and Ducharme, 2001" startWordPosition="2321" endWordPosition="2324">antic role labeling is that we have to deal with words, and that a simple index i D does not carry any information specific to a word: for each word we need a set of features relevant for the task. As described earlier, previous methods construct a parse tree, and then compute hand-built features which are then fed to a classification algorithm. In order to bypass the use of a parse tree, we convert each word i D into a particular vector wi Rd which is going to be learnt for the task we are interested in. This approach has already been used with great success in the domain of language models (Bengio and Ducharme, 2001; Schwenk and Gauvain, 2002). 0 0 1 1 0 1 0 1 0 0 1 1 Lookup Table d ... d Linear Layer with sentenceadapted columns d C(position w.r.t. cat, position w.r.t. sat) Softmax Squashing Layer ... ARG1 ARG2 ARGM LOC ARGM TMP Classical Linear Layer Tanh Squashing Layer nhu Ci ws(6) ws(2) s(1) w ... C1 C2 C6 Classical Linear Layer ws(6) ... ws(2) s(1) w s(1) s(2) ... s(6) sat the Input Sentence on the mat cat Figure 2: MLP architecture for shallow semantic parsing. The input sequence is at the top. The output class probabilities for the word of interest (cat) given the verb of interest (sat) are given</context>
<context position="28525" citStr="Bengio and Ducharme, 2001" startWordPosition="4755" endWordPosition="4758">ating known invariances via virtual training data. In image recognition problems it is common to create artificial training data by taking into account invariances in the images, e.g. via rotation and scale. Such data improves generalization substantially. It may be possible to achieve similar results for text, by warping training data to create new sentences, or by constructing sentences from scratch using a hand-built grammar. Unlabeled data. Our representation of words is as d dimensional vectors. We could try to improve this representation by learning a language model from unlabeled data (Bengio and Ducharme, 2001). As many words in PropBank only appear a few times, the representation might improve, even though the learning is unsupervised. This may also make the system generalize better to types of data other than the Wall Street Journal. Transductive Inference. Finally, one can also use unlabeled data as part of the supervised training process, which is called transduction or semi-supervised learning. In particular, we find the possibility of using unlabeled data, invariances and the use of transduction exciting. These possibilities naturally fit into our framework, whereas scalability issues will lim</context>
</contexts>
<marker>Bengio, Ducharme, 2001</marker>
<rawString>Y. Bengio and R. Ducharme. 2001. A neural probabilistic language model. In Advances in Neural Information Processing Systems, NIPS 13.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B E Boser</author>
<author>I M Guyon</author>
<author>V N Vapnik</author>
</authors>
<title>A training algorithm for optimal margin classifiers.</title>
<date>1992</date>
<booktitle>Proceedings of the fifth annual workshop on Computational learning theory,</booktitle>
<pages>144152</pages>
<contexts>
<context position="4259" citStr="Boser et al., 1992" startWordPosition="655" endWordPosition="658"> structure in text (see for example Figure 1). Because of its nature, role labeling seems to require the syntactic analysis of a sentence before attributing semantic labels. Using this intuition, state-of-the-art systems first build a parse tree, and syntactic constituents are then labeled by feeding hand-built features extracted from the parse tree to a machine learning system, e.g. the ASSERT system (Pradhan et al., 2004). This is rather slow, taking a few seconds per sentence at test time, partly because of the parse tree component, and partly because of the use of Support Vector Machines (Boser et al., 1992), which have linear complexity in testing time with respect to the number of training examples. This makes it hard to apply this method to interesting end user applications. Here, we propose a radically different approach that avoids the more complex task of building a full parse tree. From a machine learning point of view, a human does not need to be taught about parse trees to talk. It is possible, however, that our brains may implicitly learn features highly correlated with those extracted from a parse tree. We propose to develop an architecture that implements this kind of implicit learnin</context>
<context position="8407" citStr="Boser et al., 1992" startWordPosition="1355" endWordPosition="1358">nodes of that node). 561 \x0c The voice of the sentence: active or passive (part of the PropBank gold annotation); as well as several other features (predicate, head word, verb sub-categorization, . .. ). The authors of (Pradhan et al., 2004) used a similar structure, but added more features, notably head word part-of-speech, the predicted named entity class of the argument, word sense disambiguation of the verb and verb clustering, and others (they add 25 variants of 12 new feature types overall.) Their system also uses a parser, as before, and then a polynomial Support Vector Machine (SVM) (Boser et al., 1992) is used in two further stages: to classify each node in the tree as being a semantic argument or not for a given verb; and then to classify each semantic argument into one of the classes (ARG1, ARG2, etc.). The first SVM solves a twoclass problem, the second solves a multi-class problem using a one-vs-the-rest approach. The final system, called ASSERT, gives state-of-the-art performance and is also freely available at: http:// oak.colorado.edu/assert/. We compare to this system in our experimental results in Section 5. Several other competing methods exist, e.g. the ones that participated in </context>
</contexts>
<marker>Boser, Guyon, Vapnik, 1992</marker>
<rawString>B.E. Boser, I.M. Guyon, and V.N. Vapnik. 1992. A training algorithm for optimal margin classifiers. Proceedings of the fifth annual workshop on Computational learning theory, pages 144152.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J S Bridle</author>
</authors>
<title>Probabilistic interpretation of feedforward classification network outputs, with relationships to statistical pattern recognition. In</title>
<date>1990</date>
<booktitle>Neurocomputing: Algorithms, Architectures and Applications,</booktitle>
<pages>227--236</pages>
<editor>F. Fogelman Soulie and J. Herault, editors,</editor>
<publisher>NATO ASI Series.</publisher>
<contexts>
<context position="17108" citStr="Bridle, 1990" startWordPosition="2886" endWordPosition="2887">ftmost or rightmost bit to 1. The parameters involved in this function are also considered during the backpropagation. With such an architecture we allow our MLP to automatically adapt the importance of a word in the sentence given its distance to the word we want to classify, and to the verb we are interested in. This idea is the major novelty in this work, and is crucial for the success of the entire architecture, as we will see in the experiments. 4.1.4 Learning class probabilities The last layer in our MLP is a classical linear layer as described in (1), with a softmax squashing function (Bridle, 1990). Considering (1) and given z = Mz, we have hi(z) = exp zi P j exp zj . This allows us to interpret outputs as probabilities for each semantic role label. The training of the whole system is achieved using a normal stochastic gradient descent. 4.2 Word representation As we have seen, in our model we are learning one d dimensional vector to represent each word. If the dataset were large enough, this would be an elegant solution. In practice many words occur infrequently within PropBank, so (independent of the size of d) we can still only learn a very poor representation for words that only appe</context>
</contexts>
<marker>Bridle, 1990</marker>
<rawString>J.S. Bridle. 1990. Probabilistic interpretation of feedforward classification network outputs, with relationships to statistical pattern recognition. In F. Fogelman Soulie and J. Herault, editors, Neurocomputing: Algorithms, Architectures and Applications, pages 227 236. NATO ASI Series.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Brill</author>
</authors>
<title>A simple rule-based part of speech tagger.</title>
<date>1992</date>
<booktitle>Proceedings of the Third Conference on Applied Natural Language Processing,</booktitle>
<pages>152155</pages>
<contexts>
<context position="19467" citStr="Brill, 1992" startWordPosition="3295" endWordPosition="3296">ow only on the word position, and not on a verb. More precisely: Ci = \x1a 0 if 2 |i posw |&gt; wsz 1 Wiposw otherwise , 564 \x0cwhere Wk Rnhud and wsz is a window size. We chose wsz = 5 in our experiments. The d-dimensional vectors learnt take into account the capitalization of a word, and the prefix and suffix calculated using Porter-Stemmer. See http: //ml.nec-labs.com/software/senna for more details. We trained on the training set of PropBank supplemented with the Brown corpus, resulting in a test accuracy on the test set of PropBank of 96.85% which compares to 96.66% using the Brill tagger (Brill, 1992). Semantic Role Labeling In our experiments we considered a 23-class problem of NULL (no label), the core arguments ARG0-5, REL, ARGA, and ARGM- along with the 13 secondary modifier labels such as ARGM-LOC and ARGM-TMP. We simplified R-ARGn and C-ARGn to be written as ARGn, and post-processed ASSERT to do this as well. We compared our system to the freely available ASSERT system (Pradhan et al., 2004). Both systems are fed only the input sentence during testing, with traces removed, so they cannot make use of many PropBank features such as frameset identitifier, person, tense, aspect, voice, a</context>
</contexts>
<marker>Brill, 1992</marker>
<rawString>E. Brill. 1992. A simple rule-based part of speech tagger. Proceedings of the Third Conference on Applied Natural Language Processing, pages 152155.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Charniak</author>
</authors>
<title>A maximum-entropy-inspired parser.</title>
<date>2000</date>
<booktitle>Proceedings of the first conference on North American chapter of the Association for Computational Linguistics,</booktitle>
<pages>132139</pages>
<contexts>
<context position="7152" citStr="Charniak, 2000" startWordPosition="1134" endWordPosition="1135">relative to some verb. Shallow semantic parsing has immediate applications in tasks such as meta-data extraction (e.g. from web documents) and question and answer based systems (e.g. call center systems), amongst others. 3 Previous Work Several authors have already attempted to build machine learning approaches for the semantic rolelabeling problem. In (Gildea and Jurafsky, 2002) the authors presented a statistical approach to learning (for FrameNet), with some success. They proposed to take advantage of the syntactic tree structure that can be predicted by a parser, such as Charniaks parser (Charniak, 2000). Their aim is, given a node in the parse tree, to assign a semantic role label to the words that are the children of that node. They extract several key types of features from the parse tree to be used in a statistical model for prediction. These same features also proved crucial to subsequent approaches, e.g. (Pradhan et al., 2004). These features include: The parts of speech and syntactic labels of words and nodes in the tree. The nodes position (left or right) in relation to the verb. The syntactic path to the verb in the parse tree. Whether a node in the parse tree is part of a noun or ve</context>
</contexts>
<marker>Charniak, 2000</marker>
<rawString>E. Charniak. 2000. A maximum-entropy-inspired parser. Proceedings of the first conference on North American chapter of the Association for Computational Linguistics, pages 132139.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Gildea</author>
<author>D Jurafsky</author>
</authors>
<title>Automatic labeling of semantic roles.</title>
<date>2002</date>
<journal>Computational Linguistics,</journal>
<volume>28</volume>
<issue>3</issue>
<contexts>
<context position="872" citStr="Gildea and Jurafsky, 2002" startWordPosition="125" endWordPosition="128">itecture Ronan Collobert NEC Laboratories America, Inc. 4 Independence Way Suite 200, Princeton, NJ 08540 collober@nec-labs.com Jason Weston NEC Laboratories America, Inc. 4 Independence Way Suite 200, Princeton, NJ 08540 jasonw@nec-labs.com Abstract We describe a novel neural network architecture for the problem of semantic role labeling. Many current solutions are complicated, consist of several stages and handbuilt features, and are too slow to be applied as part of real applications that require such semantic labels, partly because of their use of a syntactic parser (Pradhan et al., 2004; Gildea and Jurafsky, 2002). Our method instead learns a direct mapping from source sentence to semantic tags for a given predicate without the aid of a parser or a chunker. Our resulting system obtains accuracies comparable to the current state-of-the-art at a fraction of the computational cost. 1 Introduction Semantic understanding plays an important role in many end-user applications involving text: for information extraction, web-crawling systems, question and answer based systems, as well as machine translation, summarization and search. Such applications typically have to be computationally cheap to deal with an e</context>
<context position="6919" citStr="Gildea and Jurafsky, 2002" startWordPosition="1092" endWordPosition="1095">f the numbering system is labeled for each particular verb as so-called frames. Additionally, semantic roles can also be labeled with one of 13 ARGM adjunct labels, such as ARGM-LOC or ARGM-TMP for additional locational or temporal information relative to some verb. Shallow semantic parsing has immediate applications in tasks such as meta-data extraction (e.g. from web documents) and question and answer based systems (e.g. call center systems), amongst others. 3 Previous Work Several authors have already attempted to build machine learning approaches for the semantic rolelabeling problem. In (Gildea and Jurafsky, 2002) the authors presented a statistical approach to learning (for FrameNet), with some success. They proposed to take advantage of the syntactic tree structure that can be predicted by a parser, such as Charniaks parser (Charniak, 2000). Their aim is, given a node in the parse tree, to assign a semantic role label to the words that are the children of that node. They extract several key types of features from the parse tree to be used in a statistical model for prediction. These same features also proved crucial to subsequent approaches, e.g. (Pradhan et al., 2004). These features include: The pa</context>
<context position="23688" citStr="Gildea and Jurafsky, 2002" startWordPosition="3996" endWordPosition="3999">59 and 1712 times respectively. 565 \x0cEven though some verbs are infrequent, one cannot cluster all verbs into a single group, as each verb dictates the types of semantic roles in the sentence, depending on its frame. Clustering all words into their part-of-speech, including the predicate, gives a poor 73.8% compared with 81.1%, where everything is clustered apart from the predicate. Figure 3 gives some anecdotal examples of test set predictions of our final model compared to ASSERT. 5.2 Argument Classification Accuracy So far we have not used the same accuracy measures as in previous work (Gildea and Jurafsky, 2002; Pradhan et al., 2004). Currently our architecture is designed to label on a per-word basis, while existing systems perform a segmentation process, and then label segments. While we do not optimize our model for the same criteria, it is still possible to measure the accuracy using the same metrics. We measured the argument classification accuracy of our network, assuming the correct segmentation is given to our system, as in (Pradhan et al., 2004), by post-processing our per-word tags to form a majority vote over each segment. This gives 83.18% accuracy for our network when we suppose the pre</context>
<context position="27282" citStr="Gildea and Jurafsky, 2002" startWordPosition="4559" endWordPosition="4562">the PropBank test set, showing Neural Net and ASSERT and gold standard labelings, with per-word accuracy in brackets. Note that even though our labeling does not match the hand-annotated one in the second sentence it still seems to make some sense as in Delaware County is labeled as a location modifier. The complete set of predictions on the test set can be found at http: //ml.nec-labs.com/software/senna. would improve with more hand-built features. For example, simply adding whether each word is part of a noun or verb phrase using the handannotated parse tree (the so-called GOV feature from (Gildea and Jurafsky, 2002)) improves the performance of our system from 83.95% to 85.8%. One must trade the generality of the model with its specificity, and also take into account how long the features take to compute. Incorporating segment information Our system has no prior knowledge about segmentation in text. This could be encoded in many ways: most obviously by using a chunker, but also by 566 \x0cdesigning a different network architecture, e.g. by encoding contiguity constraints. To show the latter is useful, using hand-annotated segments to force contiguity by majority vote leads to an improvement from 83.95% t</context>
</contexts>
<marker>Gildea, Jurafsky, 2002</marker>
<rawString>D. Gildea and D. Jurafsky. 2002. Automatic labeling of semantic roles. Computational Linguistics, 28(3):245288.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Gildea</author>
<author>M Palmer</author>
</authors>
<title>The necessity of parsing for predicate argument recognition.</title>
<date>2001</date>
<booktitle>Proceedings of the 40th Annual Meeting on Association for Computational Linguistics,</booktitle>
<pages>239246</pages>
<contexts>
<context position="10315" citStr="Gildea and Palmer, 2001" startWordPosition="1663" endWordPosition="1666">training is at least quadratic in time with respect to the number of training examples. The number of support vectors involved in the SVM decision function also increases linearly with the number of training examples. This makes SVMs slow on large-scale problems, both during training and testing phases. To alleviate the burden of parse tree computation, several attempts have been made to remove the full parse tree information from the semantic role labeling system, in fact the shared task of CONLL 2004 was devoted to this goal, but the results were not completely satisfactory. Previously, in (Gildea and Palmer, 2001), the authors tried to show that the parse tree is necessary for good generalization by showing that segments derived from a shallow syntactic parser or chunker do not perform as well for this goal. A further analysis of using chunkers, with improved results was also given in (Punyakanok et al., 2005), but still concluded the full parse tree is most useful. 4 Neural Network Architecture Ideally, we want an end-to-end fast learning system to output semantic roles for syntactic constituents without using a time consuming parse tree. Also, as explained before, we are interesting in exploring whet</context>
</contexts>
<marker>Gildea, Palmer, 2001</marker>
<rawString>D. Gildea and M. Palmer. 2001. The necessity of parsing for predicate argument recognition. Proceedings of the 40th Annual Meeting on Association for Computational Linguistics, pages 239246.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Henderson</author>
</authors>
<title>Discriminative training of a neural network statistical parser.</title>
<date>2004</date>
<booktitle>In Proceedings of the 42nd Meeting of Association for Computational Linguistics.</booktitle>
<contexts>
<context position="3479" citStr="Henderson, 2004" startWordPosition="526" endWordPosition="527">. For example, stateof-the-art syntactic parsers theoretically have cubic complexity in the sentence length (Younger, 1967)1 and several semantic extraction algorithms use the parse tree as an initial feature. In this work, we describe a novel type of neural network architecture that could help to solve some of these issues. We focus our experimental study on the semantic role labeling problem (Palmer et al., 2005): being able to give a semantic role to a syn1 Even though some parsers effectively exhibit linear behavior in sentence length (Ratnaparkhi, 1997), fast statistical parsers such as (Henderson, 2004) still take around 1.5 seconds for sentences of length 35 in tests that we made. 560 \x0ctactic constituent of a sentence, i.e. annotating the predicate argument structure in text (see for example Figure 1). Because of its nature, role labeling seems to require the syntactic analysis of a sentence before attributing semantic labels. Using this intuition, state-of-the-art systems first build a parse tree, and syntactic constituents are then labeled by feeding hand-built features extracted from the parse tree to a machine learning system, e.g. the ASSERT system (Pradhan et al., 2004). This is ra</context>
</contexts>
<marker>Henderson, 2004</marker>
<rawString>J. Henderson. 2004. Discriminative training of a neural network statistical parser. In Proceedings of the 42nd Meeting of Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Y LeCun</author>
<author>L Bottou</author>
<author>G B Orr</author>
<author>K-R Muller</author>
</authors>
<title>Efficient backprop.</title>
<date>1998</date>
<booktitle>Neural Networks: Tricks of the Trade,</booktitle>
<pages>9--50</pages>
<editor>In G.B. Orr and K.-R. Muller, editors,</editor>
<publisher>Springer.</publisher>
<contexts>
<context position="11720" citStr="LeCun et al., 1998" startWordPosition="1886" endWordPosition="1889"> exploit this, and see if we can develop a model that can learn these features instead. We are thus not interested in chunker-based techniques, even though they are faster than parser-based techniques. We propose here a neural network based architecture which achieves these two goals. 4.1 Basic Architecture The type of neural network that we employ is a Multi Layer Perceptron (MLP). MLPs have been used for many years in the machine learning field and slowly abandoned for several reasons: partly because of the difficulty of solving the non-convex optimization problems associated with learning (LeCun et al., 1998), and partly because of the difficulty of their theoretical analysis compared to alternative convex approaches. An MLP works by successively projecting the data to be classified into different spaces. These projections are done in what is called hidden layers. Given an input vector z, a hidden layer applies a linear transformation (matrix M) followed by a squashing function h: z 7 Mz 7 h(Mz) . (1) 562 \x0cA typical squashing function is the hyperbolic tangent h() = tanh(). The last layer (the output layer) linearly separates the classes. The composition of the projections in the hidden layers </context>
</contexts>
<marker>LeCun, Bottou, Orr, Muller, 1998</marker>
<rawString>Y. LeCun, L. Bottou, G. B. Orr, and K.-R. Muller. 1998. Efficient backprop. In G.B. Orr and K.-R. Muller, editors, Neural Networks: Tricks of the Trade, pages 9 50. Springer.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M P Marcus</author>
<author>M A Marcinkiewicz</author>
<author>B Santorini</author>
</authors>
<title>Building a large annotated corpus of English: the penn treebank.</title>
<date>1993</date>
<journal>Computational Linguistics,</journal>
<volume>19</volume>
<issue>2</issue>
<contexts>
<context position="5969" citStr="Marcus et al., 1993" startWordPosition="939" endWordPosition="942"> architecture we employ followed by experiments that evaluate our method. Finally, we conclude with a summary and discussion of future work. 2 Shallow Semantic Parsing FrameNet (Baker et al., 1998) and the Proposition Bank (Palmer et al., 2005), or PropBank for short, are the two main systems currently developed for semantic role-labeling annotation. We focus here on PropBank. PropBank encodes role labels by semantically tagging the syntactic structures of hand annotated parses of sentences. The current version of the dataset gives semantic tags for the same sentences as in the Penn Treebank (Marcus et al., 1993), which are excerpts from the Wall Street Journal. The central idea is that each verb in a sentence is labeled with its propositional arguments, where the abstract numbered arguments are intended to fill typical roles. For example, ARG0 is typically the actor, and ARG1 is typically the thing acted upon. The precise usage of the numbering system is labeled for each particular verb as so-called frames. Additionally, semantic roles can also be labeled with one of 13 ARGM adjunct labels, such as ARGM-LOC or ARGM-TMP for additional locational or temporal information relative to some verb. Shallow s</context>
</contexts>
<marker>Marcus, Marcinkiewicz, Santorini, 1993</marker>
<rawString>M.P. Marcus, M.A. Marcinkiewicz, and B. Santorini. 1993. Building a large annotated corpus of English: the penn treebank. Computational Linguistics, 19(2):313330.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Palmer</author>
<author>D Gildea</author>
<author>P Kingsbury</author>
</authors>
<title>The proposition bank: An annotated corpus of semantic roles.</title>
<date>2005</date>
<journal>Comput. Linguist.,</journal>
<volume>31</volume>
<issue>1</issue>
<contexts>
<context position="2134" citStr="Palmer et al., 2005" startWordPosition="313" endWordPosition="316">ystems process large numbers of documents, whilst interactive human-machine applications require almost instant response. Another issue is the cost of producing labeled training data required for statistical models, which is exacerbated when those models also depend on syntactic features which must themselves be learnt. To achieve the goal of semantic understanding, the current consensus is to divide and conquer the [The company]ARG0 [bought]REL [sugar]ARG1 [on the world market]ARGM-LOC [to meet export commitments]ARGM-PNC Figure 1: Example of Semantic Role Labeling from the PropBank dataset (Palmer et al., 2005). ARG0 is typically an actor, REL an action, ARG1 an object, and ARGM describe various modifiers such as location (LOC) and purpose (PNC). problem. Researchers tackle several layers of processing tasks ranging from the syntactic, such as part-of-speech labeling and parsing, to the semantic: word-sense disambiguation, semantic role-labeling, named entity extraction, co-reference resolution and entailment. None of these tasks are end goals in themselves but can be seen as layers of feature extraction that can help in a language-based end application, such as the ones described above. Unfortunate</context>
<context position="5593" citStr="Palmer et al., 2005" startWordPosition="879" endWordPosition="882">tion of the computational cost of other methods, taking on average 0.02 seconds to label a sentence from the Penn Treebank, with almost no loss in accuracy. The rest of the article is as follows. First, we describe the problem of shallow semantic parsing in more detail, as well as existing solutions to this problem. We then detail our algorithmic approach the neural network architecture we employ followed by experiments that evaluate our method. Finally, we conclude with a summary and discussion of future work. 2 Shallow Semantic Parsing FrameNet (Baker et al., 1998) and the Proposition Bank (Palmer et al., 2005), or PropBank for short, are the two main systems currently developed for semantic role-labeling annotation. We focus here on PropBank. PropBank encodes role labels by semantically tagging the syntactic structures of hand annotated parses of sentences. The current version of the dataset gives semantic tags for the same sentences as in the Penn Treebank (Marcus et al., 1993), which are excerpts from the Wall Street Journal. The central idea is that each verb in a sentence is labeled with its propositional arguments, where the abstract numbered arguments are intended to fill typical roles. For e</context>
</contexts>
<marker>Palmer, Gildea, Kingsbury, 2005</marker>
<rawString>M. Palmer, D. Gildea, and P. Kingsbury. 2005. The proposition bank: An annotated corpus of semantic roles. Comput. Linguist., 31(1):71106.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Pradhan</author>
<author>W Ward</author>
<author>K Hacioglu</author>
<author>J Martin</author>
<author>D Jurafsky</author>
</authors>
<title>Shallow semantic parsing using support vector machines.</title>
<date>2004</date>
<booktitle>Proceedings of HLT/NAACL-2004.</booktitle>
<contexts>
<context position="844" citStr="Pradhan et al., 2004" startWordPosition="121" endWordPosition="124">el Neural Network Architecture Ronan Collobert NEC Laboratories America, Inc. 4 Independence Way Suite 200, Princeton, NJ 08540 collober@nec-labs.com Jason Weston NEC Laboratories America, Inc. 4 Independence Way Suite 200, Princeton, NJ 08540 jasonw@nec-labs.com Abstract We describe a novel neural network architecture for the problem of semantic role labeling. Many current solutions are complicated, consist of several stages and handbuilt features, and are too slow to be applied as part of real applications that require such semantic labels, partly because of their use of a syntactic parser (Pradhan et al., 2004; Gildea and Jurafsky, 2002). Our method instead learns a direct mapping from source sentence to semantic tags for a given predicate without the aid of a parser or a chunker. Our resulting system obtains accuracies comparable to the current state-of-the-art at a fraction of the computational cost. 1 Introduction Semantic understanding plays an important role in many end-user applications involving text: for information extraction, web-crawling systems, question and answer based systems, as well as machine translation, summarization and search. Such applications typically have to be computation</context>
<context position="4067" citStr="Pradhan et al., 2004" startWordPosition="619" endWordPosition="622">parsers such as (Henderson, 2004) still take around 1.5 seconds for sentences of length 35 in tests that we made. 560 \x0ctactic constituent of a sentence, i.e. annotating the predicate argument structure in text (see for example Figure 1). Because of its nature, role labeling seems to require the syntactic analysis of a sentence before attributing semantic labels. Using this intuition, state-of-the-art systems first build a parse tree, and syntactic constituents are then labeled by feeding hand-built features extracted from the parse tree to a machine learning system, e.g. the ASSERT system (Pradhan et al., 2004). This is rather slow, taking a few seconds per sentence at test time, partly because of the parse tree component, and partly because of the use of Support Vector Machines (Boser et al., 1992), which have linear complexity in testing time with respect to the number of training examples. This makes it hard to apply this method to interesting end user applications. Here, we propose a radically different approach that avoids the more complex task of building a full parse tree. From a machine learning point of view, a human does not need to be taught about parse trees to talk. It is possible, howe</context>
<context position="7487" citStr="Pradhan et al., 2004" startWordPosition="1193" endWordPosition="1196"> rolelabeling problem. In (Gildea and Jurafsky, 2002) the authors presented a statistical approach to learning (for FrameNet), with some success. They proposed to take advantage of the syntactic tree structure that can be predicted by a parser, such as Charniaks parser (Charniak, 2000). Their aim is, given a node in the parse tree, to assign a semantic role label to the words that are the children of that node. They extract several key types of features from the parse tree to be used in a statistical model for prediction. These same features also proved crucial to subsequent approaches, e.g. (Pradhan et al., 2004). These features include: The parts of speech and syntactic labels of words and nodes in the tree. The nodes position (left or right) in relation to the verb. The syntactic path to the verb in the parse tree. Whether a node in the parse tree is part of a noun or verb phrase (by looking at the parent nodes of that node). 561 \x0c The voice of the sentence: active or passive (part of the PropBank gold annotation); as well as several other features (predicate, head word, verb sub-categorization, . .. ). The authors of (Pradhan et al., 2004) used a similar structure, but added more features, notab</context>
<context position="19871" citStr="Pradhan et al., 2004" startWordPosition="3362" endWordPosition="3365"> details. We trained on the training set of PropBank supplemented with the Brown corpus, resulting in a test accuracy on the test set of PropBank of 96.85% which compares to 96.66% using the Brill tagger (Brill, 1992). Semantic Role Labeling In our experiments we considered a 23-class problem of NULL (no label), the core arguments ARG0-5, REL, ARGA, and ARGM- along with the 13 secondary modifier labels such as ARGM-LOC and ARGM-TMP. We simplified R-ARGn and C-ARGn to be written as ARGn, and post-processed ASSERT to do this as well. We compared our system to the freely available ASSERT system (Pradhan et al., 2004). Both systems are fed only the input sentence during testing, with traces removed, so they cannot make use of many PropBank features such as frameset identitifier, person, tense, aspect, voice, and form of the verb. As our algorithm outputs a semantic tag for each word of a sentence, we directly compare this per-word accuracy with ASSERT. Because ASSERT uses a parser, and because PropBank was built by labeling the nodes of a hand-annotated parse tree, pernode accuracy is usually reported in papers such as (Pradhan et al., 2004). Unfortunately our approach is based on a completely different pr</context>
<context position="23711" citStr="Pradhan et al., 2004" startWordPosition="4000" endWordPosition="4003">ely. 565 \x0cEven though some verbs are infrequent, one cannot cluster all verbs into a single group, as each verb dictates the types of semantic roles in the sentence, depending on its frame. Clustering all words into their part-of-speech, including the predicate, gives a poor 73.8% compared with 81.1%, where everything is clustered apart from the predicate. Figure 3 gives some anecdotal examples of test set predictions of our final model compared to ASSERT. 5.2 Argument Classification Accuracy So far we have not used the same accuracy measures as in previous work (Gildea and Jurafsky, 2002; Pradhan et al., 2004). Currently our architecture is designed to label on a per-word basis, while existing systems perform a segmentation process, and then label segments. While we do not optimize our model for the same criteria, it is still possible to measure the accuracy using the same metrics. We measured the argument classification accuracy of our network, assuming the correct segmentation is given to our system, as in (Pradhan et al., 2004), by post-processing our per-word tags to form a majority vote over each segment. This gives 83.18% accuracy for our network when we suppose the predicate must also be ide</context>
</contexts>
<marker>Pradhan, Ward, Hacioglu, Martin, Jurafsky, 2004</marker>
<rawString>S. Pradhan, W. Ward, K. Hacioglu, J. Martin, and D. Jurafsky. 2004. Shallow semantic parsing using support vector machines. Proceedings of HLT/NAACL-2004.</rawString>
</citation>
<citation valid="true">
<authors>
<author>V Punyakanok</author>
<author>D Roth</author>
<author>W Yih</author>
</authors>
<title>The necessity of syntactic parsing for semantic role labeling.</title>
<date>2005</date>
<booktitle>Proceedings of IJCAI05,</booktitle>
<pages>11171123</pages>
<contexts>
<context position="10617" citStr="Punyakanok et al., 2005" startWordPosition="1715" endWordPosition="1718">s. To alleviate the burden of parse tree computation, several attempts have been made to remove the full parse tree information from the semantic role labeling system, in fact the shared task of CONLL 2004 was devoted to this goal, but the results were not completely satisfactory. Previously, in (Gildea and Palmer, 2001), the authors tried to show that the parse tree is necessary for good generalization by showing that segments derived from a shallow syntactic parser or chunker do not perform as well for this goal. A further analysis of using chunkers, with improved results was also given in (Punyakanok et al., 2005), but still concluded the full parse tree is most useful. 4 Neural Network Architecture Ideally, we want an end-to-end fast learning system to output semantic roles for syntactic constituents without using a time consuming parse tree. Also, as explained before, we are interesting in exploring whether machine learning approaches can learn structure implicitly. Hence, even if there is a deep relationship between syntax and semantics, we prefer to avoid hand-engineered features that exploit this, and see if we can develop a model that can learn these features instead. We are thus not interested i</context>
</contexts>
<marker>Punyakanok, Roth, Yih, 2005</marker>
<rawString>V. Punyakanok, D. Roth, and W. Yih. 2005. The necessity of syntactic parsing for semantic role labeling. Proceedings of IJCAI05, pages 11171123.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Ratnaparkhi</author>
</authors>
<title>A linear observed time statistical parser based on maximum entropy models.</title>
<date>1997</date>
<booktitle>Proceedings of EMNLP.</booktitle>
<contexts>
<context position="3427" citStr="Ratnaparkhi, 1997" startWordPosition="519" endWordPosition="520">ow to be used in the applications previously described. For example, stateof-the-art syntactic parsers theoretically have cubic complexity in the sentence length (Younger, 1967)1 and several semantic extraction algorithms use the parse tree as an initial feature. In this work, we describe a novel type of neural network architecture that could help to solve some of these issues. We focus our experimental study on the semantic role labeling problem (Palmer et al., 2005): being able to give a semantic role to a syn1 Even though some parsers effectively exhibit linear behavior in sentence length (Ratnaparkhi, 1997), fast statistical parsers such as (Henderson, 2004) still take around 1.5 seconds for sentences of length 35 in tests that we made. 560 \x0ctactic constituent of a sentence, i.e. annotating the predicate argument structure in text (see for example Figure 1). Because of its nature, role labeling seems to require the syntactic analysis of a sentence before attributing semantic labels. Using this intuition, state-of-the-art systems first build a parse tree, and syntactic constituents are then labeled by feeding hand-built features extracted from the parse tree to a machine learning system, e.g. </context>
</contexts>
<marker>Ratnaparkhi, 1997</marker>
<rawString>A. Ratnaparkhi. 1997. A linear observed time statistical parser based on maximum entropy models. Proceedings of EMNLP.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Schwenk</author>
<author>J L Gauvain</author>
</authors>
<title>Connectionist language modeling for large vocabulary continuousspeech recognition.</title>
<date>2002</date>
<booktitle>Proceedings of ICASSP02.</booktitle>
<contexts>
<context position="14200" citStr="Schwenk and Gauvain, 2002" startWordPosition="2325" endWordPosition="2328"> we have to deal with words, and that a simple index i D does not carry any information specific to a word: for each word we need a set of features relevant for the task. As described earlier, previous methods construct a parse tree, and then compute hand-built features which are then fed to a classification algorithm. In order to bypass the use of a parse tree, we convert each word i D into a particular vector wi Rd which is going to be learnt for the task we are interested in. This approach has already been used with great success in the domain of language models (Bengio and Ducharme, 2001; Schwenk and Gauvain, 2002). 0 0 1 1 0 1 0 1 0 0 1 1 Lookup Table d ... d Linear Layer with sentenceadapted columns d C(position w.r.t. cat, position w.r.t. sat) Softmax Squashing Layer ... ARG1 ARG2 ARGM LOC ARGM TMP Classical Linear Layer Tanh Squashing Layer nhu Ci ws(6) ws(2) s(1) w ... C1 C2 C6 Classical Linear Layer ws(6) ... ws(2) s(1) w s(1) s(2) ... s(6) sat the Input Sentence on the mat cat Figure 2: MLP architecture for shallow semantic parsing. The input sequence is at the top. The output class probabilities for the word of interest (cat) given the verb of interest (sat) are given at the bottom. The first la</context>
</contexts>
<marker>Schwenk, Gauvain, 2002</marker>
<rawString>H. Schwenk and J.L. Gauvain. 2002. Connectionist language modeling for large vocabulary continuousspeech recognition. Proceedings of ICASSP02.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D H Younger</author>
</authors>
<title>Recognition and parsing of context-free languages in time n3 .</title>
<date>1967</date>
<journal>Information and Control,</journal>
<volume>10</volume>
<contexts>
<context position="2986" citStr="Younger, 1967" startWordPosition="445" endWordPosition="446">part-of-speech labeling and parsing, to the semantic: word-sense disambiguation, semantic role-labeling, named entity extraction, co-reference resolution and entailment. None of these tasks are end goals in themselves but can be seen as layers of feature extraction that can help in a language-based end application, such as the ones described above. Unfortunately, the state-of-the-art solutions of many of these tasks are simply too slow to be used in the applications previously described. For example, stateof-the-art syntactic parsers theoretically have cubic complexity in the sentence length (Younger, 1967)1 and several semantic extraction algorithms use the parse tree as an initial feature. In this work, we describe a novel type of neural network architecture that could help to solve some of these issues. We focus our experimental study on the semantic role labeling problem (Palmer et al., 2005): being able to give a semantic role to a syn1 Even though some parsers effectively exhibit linear behavior in sentence length (Ratnaparkhi, 1997), fast statistical parsers such as (Henderson, 2004) still take around 1.5 seconds for sentences of length 35 in tests that we made. 560 \x0ctactic constituent</context>
</contexts>
<marker>Younger, 1967</marker>
<rawString>D. H. Younger. 1967. Recognition and parsing of context-free languages in time n3 . Information and Control, 10.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>