Multi-Component Word Sense Disambiguation
Massimiliano Ciaramita Mark Johnson
Brown University
Department of Cognitive and Linguistic Sciences
Providence, RI 02912

massi@brown.edu,mark johnson@brown.edu
Abstract
This paper describes the system MC-WSD pre-
sented for the English Lexical Sample task. The
system is based on a multicomponent architecture.
It consists of one classifier with two components.
One is trained on the data provided for the task. The
second is trained on this data and, additionally, on
an external training set extracted from the Wordnet
glosses. The goal of the additional component is to
lessen sparse data problems by exploiting the infor-
mation encoded in the ontology.
1 Introduction
One of the main difficulties in word sense classifi-
cation tasks stems from the fact that word senses,
such as Wordnet‚Äôs synsets (Fellbaum, 1998), de-
fine very specific classes1. As a consequence train-
ing instances are often too few in number to cap-
ture extremely fine-grained semantic distinctions.
Word senses, however, are not just independent enti-
ties but are connected by several semantic relations;
e.g., the is-a, which specifies a relation of inclusion
among classes such as ‚Äúcar is-a vehicle‚Äù. Based on
the is-a relation Wordnet defines large and complex
hierarchies for nouns and verbs.
These hierarchical structures encode potentially
useful world-knowledge that can be exploited for
word sense classification purposes, by providing
means for generalizing beyond the narrowest synset
level. To disambiguate an instance of a noun like
‚Äúbat‚Äù a system might be more successful if, in-
stead of limiting itself to applying what it knows
about the concepts ‚Äúbat-mammal‚Äù and ‚Äúbat-sport-
implement‚Äù, it could use additional knowledge
about other ‚Äúanimals‚Äù and ‚Äúartifacts‚Äù.
Our system implements this intuition in two
steps. First, for each sense of an ambiguous word
we generate an additional set of training instances

We would like to thank Thomas Hofmann and our colleagues
in the Brown Laboratory for Linguistic Information Processing
(BLLIP).
1
51% of the noun synsets in Wordnet contain only 1 word.
from the Wordnet glosses. This data is not limited to
the specific synset that represents one of the senses
of the word, but concerns also other synsets that are
semantically similar, i.e., close in the hierarchy, to
that synset. Then, we integrate the task-specific and
the external training data with a multicomponent
classifier that simplifies the system for hierarchical
word sense disambiguation presented in (Ciaramita
et al., 2003). The classifier consists of two com-
ponents based on the averaged multiclass percep-
tron (Collins, 2002; Crammer and Singer, 2003).
The first component is trained on the task-specific
data while the second is trained on the former and
on the external training data. When predicting a la-
bel for an instance the classifier combines the pre-
dictions of the two components. Cross-validation
experiments on the training data show the advan-
tages of the multicomponent architecture.
In the following section we describe the features
used by our system. In Section 3 we explain how we
generated the additional training set. In Section 4
we describe the architecture of the classifier and in
Section 5 we discuss the specifics of the final system
and some experimental results.
2 Features
We used a set of features similar to that which
was extensively described and evaluated in (Yoong
and Hwee, 2002). The sentence with POS annota-
tion ‚ÄúA-DT newspaper-NN and-CC now-RB a-DT
bank-NN have-AUX since-RB taken-VBN over-
RB‚Äù serves as an example to illustrate them. The
word to disambiguate is bank (or activate for (7)).
1. part of speech of neighboring words  ,
	
 ; e.g., !#"%$'&)( ,
)*+$',), , .-/"0$2134 , ...
2. words in the same sentence WS or passage WC; e.g.,
576
$'879:.;< ,
576
$>=:;?@ ,
576
$BA7;CEDGF9F7;?H , ...
3. n-grams:
I ,.J  , 	
K7 ; e.g.,
,.J7ELM$NA=C , ,.J)-/"0$'879:.; , ,.J)-OLP$'Q9R;
Association for Computational Linguistics
for the Semantic Analysis of Text, Barcelona, Spain, July 2004
SENSEVAL-3: Third International Workshop on the Evaluation of Systems
I ,.J   ,
 EM
  7K    	 ;
e.g., ,.JEL
 #" $'A7=C 9 ,
,.J- " -OL%$'879:; Q.9R;
4. syntactically governing elements under a phrase J" ;
e.g., J " $2Q.9R;
6
5. syntactically governed elements under a phrase JL ;
e.g., J)L+$ 9 ,) , J)LM$'A7= C ,)
6. coordinates 	 ; e.g., 	 $'A7;C!DGF79F7;?
7. features for verbs, e.g, ‚Äú... activate the pressure‚Äù:
I number of arguments ), ; e.g., ), $ 
I syntactic type of arguments )1 ; e.g., )1 $2,)
8. morphology/spelling:
I prefixes/suffixes up to 4
characters )
6
; e.g.,

$  
$  
$  
$
I uppercase characters 3 ; e.g., 3 $ 
I number/type of word‚Äôs components 	!#" ;
e.g., $  #" $%$79 A.R
The same features were extracted from the given
test and training data, and the additional dataset.
POS and other syntactic features were extracted
from parse trees. Training and test data, and
the Wordnet glosses, were parsed with Charniak‚Äôs
parser (Charniak, 2000). Open class words were
morphologically simplified with the ‚Äúmorph‚Äù func-
tion from the Wordnet library ‚Äúwn.h‚Äù. When it
was not possible to identify the noun or verb in the
glosses 2 we only extracted a limited set of features:
WS, WC, and morphological features. Each gloss
provides one training instance per synset. Overall
we found approximately 200,000 features.
3 External training data
There are 57 different ambiguous words in the task:
32 verbs, 20 nouns, and 5 adjectives. For each word
&
a training set of pairs ')(+*-,.#*0/1*3254 , .#*7698:'
&
/ , is
generated from the task-specific data; ( * is a vector
of features and 8;'
&
/ is the set of possible senses for
&
. Nouns are labeled with Wordnet 1.71 synset la-
bels, while verbs and adjectives are annotated with
the Wordsmyth‚Äôs dictionary labels. For nouns and
verbs we used the hierarchies of Wordnet to gener-
ate the additional training data. We used the given
sense map to map Wordsmyth senses to Wordnet
synsets. For adjectives we simply used the task-
specific data and a standard flat classifier.3
For each noun, or verb, synset we generated
a fixed number < of other semantically similar
2
E.g., the example sentence for the noun synset relegation
is ‚ÄúHe has been relegated to a post in Siberia‚Äù,
3
We used Wordnet 2.0 in our experiments using the Word-
net sense map files to map synsets from 1.71 to 2.0.
Algorithm 1 Find < Closest Neighbors
1: input =?>A@B.DC , EGFH>JI , k
2: repeat
3: KMLONPRQTS+UV=HW
4: XZY\[GL^]!_)`aBbcad efbTaB]!bcg5e5hDg+dRaT')K5,i<j/
5: for each kG6lXmY\[ do
6: if n EGFcnpoq< then
7: E F LOE Fsr k
8: end if
9: end for
10: for each t;ut is a parent of K do
11: ENQUE(Q,v)
12: end for
13: DEQUE(Q)
14: until n EGFvn#>J< or =A>JI
synsets. For each sense we start collecting synsets
among the descendants of the sense itself and work
our way up the hierarchy following the paths from
the sense to the top until we found < synsets. At
each level we look for the closest < descendants
of the current synset as follows - this is the ‚Äúclos-
est descendants()‚Äù function of Algorithm 1 above.
If there are < or less descendants we collect them
all. Otherwise, we take the closest < around the
synset exploiting the fact that when ordered, using
the synset IDs as keys, similar synsets tend to be
close to each other4. For example, synsets around
‚ÄúRhode Islander‚Äù refer to other American states‚Äô in-
habitants‚Äô names:
Synset ID Nouns
109127828 Pennsylvanian
w
109127914 Rhode Islander
109128001 South Carolinian
Algorithm 1 presents a schematic description of
the procedure. For each sense . of a noun, or verb,
we produced a set ExF of <M>zy{#{ similar neighbor
synsets of . . We label this set with |. , thus for each
set of labels 8;'
&
/ we induce a set of pseudo-labels
|
8:'
&
/ .For each synset in E\F we compiled a train-
ing instance from the Wordnet glosses. At the end
of this process, for each noun or verb, there is an
additional training set ')( * ,}|
. * /~ .
4 Classifier
4.1 Multiclass averaged perceptron
Our base classifier is the multiclass averaged per-
ceptron. The multiclass perceptron (Crammer and
Singer, 2003) is an on-line learning algorithm which
4
This likely depends on the fact that the IDs encode the lo-
cation in the hierarchy, even though we don‚Äôt know how the IDs
are generated.
Algorithm 2 Multiclass Perceptron
1: input training data ')( * ,. * /1* 254 ,

2: repeat
3: for  > y	, , do
4:  * >?@
	\6 8 u)t,( * )t	F,( * C
5: if n  * n  { then
6: t F L t F (*
7: for 	 6 * do
8: t  L t 
4
    (D*
9: end for
10: end if
11: end for
12: until no more mistakes
extends to the multiclass case the standard percep-
tron. It takes as input a training set ')( * ,. * /1*3254 ,
( * 6 ! , and . * 6?8;'
&
/ . In the multiclass per-
ceptron, one introduces a weight vector t!F96" 
for every .;6 8;'
&
/ , and defines # by the so-called
winner-take-all rule
#')(%$

/ >'&()+*,&.-
F
/0
)t	F!,(   (1)
Here

6  
 0214365 87
refers to the matrix of
weights, with every column corresponding to one of
the weight vectors tF . The algorithm is summarized
in Algorithm 2. Training patterns are presented one
at a time. Whenever #')( * $

/:9>A. * an update step
is performed; otherwise the weight vectors remain
unchanged. To perform the update, one first com-
putes the error set  * containing those class labels
that have received a higher score than the correct
class:
 * >?@
	\6 8 u)t,( * )t	F,( * C (2)
We use the simplest case of uniform update weights,

4
    for 	 6; * .
The perceptron algorithm defines a sequence of
weight matrices
 1=<5
,B,
 1
1
5
, where
 1 * 5
is the
weight matrix after the first  training items have
been processed. In the standard perceptron, the
weight matrix

>
 1
1
5
is used to classify the un-
labeled test examples. However, a variety of meth-
ods can be used for regularization or smoothing in
order to reduce the effect of overtraining. Here
we used the averaged perceptron (Collins, 2002),
where the weight matrix used to classify the test
data is the average of all of the matrices posited dur-
ing training, i.e.,

>
4
1
>
1*3254
 *
.
4.2 Multicomponent architecture
Task specific and external training data are inte-
grated with a two-component perceptron. The dis-
Algorithm 3 Multicomponent Perceptron
1: input ')( * ,. * /1* 254 ,

>J{ ,')(@?#, |
.A?R/~? 254 , B > { ,
2: for C > y	, ,ED do
3: train M on ')(@?#, |
.A?R/~? 254 and ')( * ,. * /1*3254
4: train V on ')( * ,. * /1*3254
5: end for
criminant function is defined as:
#')(%$

,FB / >G&(F)H*,&.-
F
/0I1=3J5K
FL)tFT,(  
KNM
F PO
M
F ,( 
The first component is trained on the task-specific
data. The second component learns a separate
weight matrix B , where each column vector rep-
resents the set label |. , and is trained on both the
task-specific and the additional training sets. Each
component is weighted by a parameter
K
; here
KQM
F
is simply equal to y 
K
F . We experimented with
two values for
K
F , namely 1 and 0.5. In the for-
mer case only the first component is used, in the
latter they are both used, and their contributions are
equally weighted.
The training procedure for the multicomponent
classifier is described in Algorithm 3. This is a sim-
plification of the algorithm presented in (Ciaramita
et al., 2003). The two algorithms are similar except
that convergence, if the data is separable, is clear
in this case because the two components are trained
individually with the standard multiclass perceptron
procedure. Convergence is typically achieved in
less than 50 iterations, but the value for D to be used
for evaluation on the unseen test data was chosen by
cross-validation. With this version of the algorithm
the implementation is simpler especially if several
components are included.
4.3 Multilabel cases
Often, several senses of an ambiguous word are very
close in the hierarchy. Thus it can happen that a
synset belongs to the neighbor set of more than one
sense of the ambiguous word. When this is the case
the training instance for that synset is treated as a
multilabeled instance; i.e., |
. * is actually a set of la-
bels for (D* , that is, |
.*2R |
8:'
&
/ . Several methods can
be used to deal with multilabeled instances, here we
use a simple generalization of Algorithm 2. The er-
ror set for a multilabel training instance is defined
as:
 * >A@
	 6M8 u@Sc. 6 . * ,A)t ,( * )t	F,( * C (3)
which is equivalent to the definition in Equation 2
when n . * nj> y . The positive update of Algorithm 2
(line 6) is also redefined. The update concerns a set
word
K
FZ> y
K
FZ> {@ word
K
F7> y
K
FH> {@ word
K
F7> y
K
F7>J{@
appear 86.1 85.5 audience 84.8 86.8 encounter 72.9 75.0
arm 85.9 87.5 bank 82.9 82.1 watch 77.1 77.9
ask 61.9 62.7 begin 57.0 61.5 hear 65.6 68.7
lose 53.1 52.5 eat 85.7 85.0 party 77.1 79.0
expect 76.6 75.9 mean 76.5 77.5 image 66.3 67.8
note 59.6 60.4 difficulty 49.2 54.2 write 68.3 65.0
plan 77.2 78.3 disc 72.1 74.1 paper 56.3 57.7
Table 1. Results on several words from the cross-validation experiments on the training data. Accuracies are reported
for the best value of  , which is then chosen as the value for the final system, together with the value  that performed
better. On most words the multicomponent model outperforms the flat one
of labels 8 *
|
8:'
&
/ such that there are incorrect
labels wich achieved a better score; i.e., 8 * > @B. 6
. * uSL		6 . * ,A)t	,( *  )t	FT,( * C . For each .6 8 *
the update is equal to 
4
 0
  , which, again, reduces
to the former case when n 8 * n!> y .
5 Results
Table 1 presents results from a set of experiments
performed by cross-validation on the training data,
for several nouns and verbs.For 37 nouns and verbs,
out of 52, the two-component model was more ac-
curate than the flat model5. We used the results from
these experiments to set, separately for each word,
the parameters D , which was equal to 13.9 on av-
erage, and
K
F . For adjectives we only set the pa-
rameter D and used the standard ‚Äúflat‚Äù perceptron.
For each word in the task we separately trained one
classifier. The system accuracy on the unseen test
set is summarized in the following table:
Measure Precision Recall
Fine all POS 71.1 71.1%
Coarse all POS 78.1 78.1%
Fine verbs 72.5 72.5%
Coarse verbs 80.0 80.0%
Fine nouns 71.3 71.3%
Coarse nouns 77.4 77.4%
Fine adjectives 49.7 49.7%
Coarse adjectives 63.5 63.5%
Overall the system has the following advantages
over that of (Ciaramita et al., 2003). Selecting the
external training data based on the most similar <
synsets has the advantage, over using supersenses,
of generating an equivalent amount of additional
data for each word sense. The additional data for
each synset is also more homogeneous, thus the
5
Since   is an adjustable parameter it is possible that,
with different values for   , the multicomponent model would
achieve even better performances.
model should have less variance6. The multicom-
ponent architecture is simpler and has an obvious
convergence proof. Convergence is faster and train-
ing is efficient. It takes less than one hour to build
and train all final systems and generate the complete
test results. We used the averaged version of the per-
ceptron and introduced an adjustable parameter
K
to
weigh each component‚Äôs contribution separately.
References
E. Charniak. 2000. A Maximum-Entropy-Inspired
Parser. In Proceedings of the 38th Annual Meet-
ing of the Association for Computational Linguis-
tics (ACL 2000).
M. Ciaramita, T. Hofmann, and M. Johnson.
2003. Hierarchical Semantic Classification:
Word Sense Disambiguation with World Knowl-
edge. In Proceedings of the 18th International
Joint Conference on Artificial Intelligence (IJCAI
2003).
M. Collins. 2002. Discriminative Training Meth-
ods for Hidden Markov Models: Theory and Ex-
periments with Perceptron Algorithms. In Pro-
ceedings of the Conference on Empirical Meth-
ods in Natural Language Processing (EMNLP
2002), pages 1‚Äì8.
K. Crammer and Y. Singer. 2003. Ultraconserva-
tive Online Algorithms for Multiclass Problems.
Journal of Machine Learning Research, 3.
C. Fellbaum. 1998. WordNet: An Electronic Lexi-
cal Database. MIT Press, Cambridge, MA.
K.L Yoong and T.N. Hwee. 2002. An Empirical
Evaluation of Knowledge Sources and Learning
Algorithms for Word Sense Disambiguation. In
Proceedings of the 2002 Conference on Empir-
ical Methods in Natural Language Processing
(EMNLP 2002).
6
Of course the supersense level, or any other level, can sim-
ply be added as an additional component.
