Statistical Machine Translation by Parsing
I. Dan Melamed
Computer Science Department
New York University
New York, NY, U.S.A.
10003-6806
lastname @cs.nyu.edu
Abstract
In an ordinary syntactic parser, the input is a string,
and the grammar ranges over strings. This paper
explores generalizations of ordinary parsing algo-
rithms that allow the input to consist of string tu-
ples and/or the grammar to range over string tu-
ples. Such algorithms can infer the synchronous
structures hidden in parallel texts. It turns out that
these generalized parsers can do most of the work
required to train and apply a syntax-aware statisti-
cal machine translation system.
1 Introduction
A parser is an algorithm for inferring the structure
of its input, guided by a grammar that dictates what
structures are possible or probable. In an ordinary
parser, the input is a string, and the grammar ranges
over strings. This paper explores generalizations of
ordinary parsing algorithms that allow the input to
consist of string tuples and/or the grammar to range
over string tuples. Such inference algorithms can
perform various kinds of analysis on parallel texts,
also known as multitexts.
Figure 1 shows some of the ways in which ordi-
nary parsing can be generalized. A synchronous
parser is an algorithm that can infer the syntactic
structure of each component text in a multitext and
simultaneously infer the correspondence relation
between these structures.1 When a parser‚Äôs input
can have fewer dimensions than the parser‚Äôs gram-
mar, we call it a translator. When a parser‚Äôs gram-
mar can have fewer dimensions than the parser‚Äôs
input, we call it a synchronizer. The corre-
sponding processes are called translation and syn-
chronization. To our knowledge, synchronization
has never been explored as a class of algorithms.
Neither has the relationship between parsing and
word alignment. The relationship between trans-
lation and ordinary parsing was noted a long time
1
A suitable set of ordinary parsers can also infer the syntac-
tic structure of each component, but cannot infer the correspon-
dence relation between these structures.
t
r
a
n
s
l
a
t
i
o
n
s
y
n
c
h
r
o
n
i
z
a
t
i
o
n
s
y
n
c
h
r
o
n
o
u
s
p
a
r
s
i
n
g
1
parsing
3
2
2
3
1
...
...
ordinary
I = dimensionality of input
D
=
dimensionality
of
grammar
synchronization
(I >= D)
parsing
synchronous
(D=I)
word
alignment
translation
(D >= I)
ordinary
parsing
(D=I=1)
generalized parsing
(any D; any I)
Figure 1: Generalizations of ordinary parsing.
ago (Aho & Ullman, 1969), but here we articu-
late it in more detail: ordinary parsing is a spe-
cial case of synchronous parsing, which is a special
case of translation. This paper offers an informal
guided tour of the generalized parsing algorithms in
Figure 1. It culminates with a recipe for using these
algorithms to train and apply a syntax-aware statis-
tical machine translation (SMT) system.
2 Multitext Grammars and Multitrees
The algorithms in this paper can be adapted for any
synchronous grammar formalism. The vehicle for
the present guided tour shall be multitext grammar
(MTG), which is a generalization of context-free
grammar to the synchronous case (Melamed, 2003).
We shall limit our attention to MTGs in Generalized
Chomsky Normal Form (GCNF) (Melamed et al.,
2004). This normal form allows simpler algorithm
descriptions than the normal forms used by Wu
(1997) and Melamed (2003).
In GCNF, every production is either a terminal
production or a nonterminal production. A nonter-
minal production might look like this:


	

	

	


 A

D(2)
B

E

(1)
There are nonterminals on the left-hand side (LHS)
and in parentheses on the right-hand side (RHS).
Each row of the production describes rewriting in
a different component text of a multitext. In each
row, a role template describes the relative order
and contiguity of the RHS nonterminals. E.g., in
the top row, [1,2] indicates that the first nonter-
minal (A) precedes the second (B). In the bottom
row, [1,2,1] indicates that the first nonterminal both
precedes and follows the second, i.e. D is discon-
tinuous. Discontinuous nonterminals are annotated
with the number of their contiguous segments, as in
 
. The  (‚Äújoin‚Äù) operator rearranges the non-
terminals in each component according to their role
template. The nonterminals on the RHS are writ-
ten in columns called links. Links express transla-
tional equivalence. Some nonterminals might have
no translation in some components, indicated by (),
as in the 2nd row. Terminal productions have ex-
actly one ‚Äúactive‚Äù component, in which there is ex-
actly one terminal on the RHS. The other compo-
nents are inactive. E.g.,



 (2)
The semantics of  are the usual semantics of
rewriting systems, i.e., that the expression on the
LHS can be rewritten as the expression on the RHS.
However, all the nonterminals in the same link must
be rewritten simultaneously. In this manner, MTGs
generate tuples of parse trees that are isomorphic up
to reordering of sibling nodes and deletion. Figure 2
shows two representations of a tree that might be
generated by an MTG in GCNF for the imperative
sentence pair Wash the dishes / Pasudu moy . The
tree exhibits both deletion and inversion in transla-
tion. We shall refer to such multidimensional trees
as multitrees.
The different classes of generalized parsing al-
gorithms in this paper differ only in their gram-
mars and in their logics. They are all compatible
with the same parsing semirings and search strate-
gies. Therefore, we shall describe these algorithms
in terms of their underlying logics and grammars,
abstracting away the semirings and search strate-
gies, in order to elucidate how the different classes
of algorithms are related to each other. Logical de-
scriptions of inference algorithms involve inference
rules:
 
 means that
 can be inferred from

and
 . An item that appears in an inference rule
stands for the proposition that the item is in the parse
chart. A production rule that appears in an inference
rule stands for the proposition that the production is
in the grammar. Such specifications are nondeter-
	


 

 

	! 

Wash
	! 
 	!
"#%$ 
 	!
moy

'&)( 
*+
&)( 
',
	! 

the
	! 
'&
&-
', # .
	! 

dishes
	! 
 	!
(/0
 	!
Pasudu

Figure 2: Above: A tree generated by a 2-MTG
in English and (transliterated) Russian. Every in-
ternal node is annotated with the linear order of
its children, in every component where there are
two children. Below: A graphical representation
of the same tree. Rectangles are 2D constituents.
dishes
the
Wash
moy
Pasudu
S
NP
N
V
WASH D DISH
PAS
MIT
V
N
NP
S
ministic: they do not indicate the order in which a
parser should attempt inferences. A deterministic
parsing strategy can always be chosen later, to suit
the application. We presume that readers are famil-
iar with declarative descriptions of inference algo-
rithms, as well as with semiring parsing (Goodman,
1999).
3 A Synchronous CKY Parser
Figure 3 shows Logic C. Parser C is any
parser based on Logic C. As in Melamed
(2003)‚Äôs Parser A, Parser C‚Äôs items consist
of a -dimensional label vector
213 and a
-dimensional d-span vector 4
13 .2 The items con-
tain d-spans, rather than ordinary spans, because
2
Superscripts and subscripts indicate the range of dimen-
sions of a vector. E.g., 5-67 is a vector spanning dimensions 1
through 8 . See Melamed (2003) for definitions of cardinality,
d-span, and the operators 9 and : .
Parser C needs to know all the boundaries of each
item, not just the outermost boundaries. Some (but
not all) dimensions of an item can be inactive, de-
noted

, and have an empty d-span ().
The input to Parser C is a tuple of parallel texts,
with lengths 1
 
 3 . The notation
  
 13 in-
dicates that the Goal item must span the input from
the left of the first word to the right of the last word
in each component 

	


. Thus, the Goal
item must be contiguous in all dimensions.
Parser C begins with an empty chart. The only in-
ferences that can fire in this state are those with no
antecedent items (though they can have antecedent
production rules). In Logic C, 

 
is the value
that the grammar assigns to the terminal production



. The range of this value depends on the
semiring used. A Scan inference can fire for the  th
word    in component  for every terminal pro-
duction in the grammar where    appears in the
 th component. Each Scan consequent has exactly
one active d-span, and that d-span always has the
form



 

because such items always span one
word, so the distance between the item‚Äôs boundaries
is always one.
The Compose inference in Logic C is the same
as in Melamed‚Äôs Parser A, using slightly different
notation: In Logic C, the function 

    
represents the value that the grammar assigns to the
nonterminal production


   
. Parser C can
compose two items if their labels appear on the RHS
of a production rule in the grammar, and if the con-
tiguity and relative order of their intervals is consis-
tent with the role templates of that production rule.
Item Form:
 13

4
13! Goal: #"
13
   $
 13%!
Inference Rules
Scan component d,

&


:
')(+*,
,-
 1
/. 1

 10 1
3 2
 1
/. 1
+  
 10 1
3
34
4
5
677
8
 1
/. 1

 10 1
3 2
 1
/. 1

9

 

 10 1
3
: ;;
<
Compose:
=?>A@
BDC E
@
BGF
=#H%@
BDC I
@
BGF$JLK
NM @
BLC E
@
BPOQI
@
B
 >R@
B
 H%@
B
!

 M @
B C E
@
B%S I
@
B

Figure 3: Logic C (‚ÄúC‚Äù for CKY)
These constraints are enforced by the d-span opera-
tors T and U .
Parser C is conceptually simpler than the syn-
chronous parsers of Wu (1997), Alshawi et al.
(2000), and Melamed (2003), because it uses only
one kind of item, and it never composes terminals.
The inference rules of Logic C are the multidimen-
sional generalizations of inference rules with the
same names in ordinary CKY parsers. For exam-
ple, given a suitable grammar and the input (imper-
ative) sentence pair Wash the dishes / Pasudu moy,
Parser C might make the 9 inferences in Figure 4 to
infer the multitree in Figure 2. Note that there is one
inference per internal node of the multitree.
Goodman (1999) shows how a parsing logic can
be combined with various semirings to compute dif-
ferent kinds of information about the input. De-
pending on the chosen semiring, a parsing logic can
compute the single most probable derivation and/or
its probability, the V most probable derivations
and/or their total probability, all possible derivations
and/or their total probability, the number of possi-
ble derivations, etc. All the parsing semirings cat-
alogued by Goodman apply the same way to syn-
chronous parsing, and to all the other classes of al-
gorithms discussed in this paper.
The class of synchronous parsers includes some
algorithms for word alignment. A translation lexi-
con (weighted or not) can be viewed as a degenerate
MTG (not in GCNF) where every production has a
link of terminals on the RHS. Under such an MTG,
the logic of word alignment is the one in Melamed
(2003)‚Äôs Parser A, but without Compose inferences.
The only other difference is that, instead of a single
item, the Goal of word alignment is any set of items
that covers all dimensions of the input. This logic
can be used with the expectation semiring (Eisner,
2002) to find the maximum likelihood estimates of
the parameters of a word-to-word translation model.
An important application of Parser C is parameter
estimation for probabilistic MTGs (PMTGs). Eis-
ner (2002) has claimed that parsing under an expec-
tation semiring is equivalent to the Inside-Outside
algorithm for PCFGs. If so, then there is a straight-
forward generalization for PMTGs. Parameter es-
timation is beyond the scope of this paper, however.
The next section assumes that we have an MTG,
probabilistic or not, as required by the semiring.
4 Translation
A -MTG can guide a synchronous parser to in-
fer the hidden structure of a -component multi-
text. Now suppose that we have a -MTG and an
input multitext with only W components, WYX .

J 
 .
	! C
	
!

 
	! C
   !
	! 

J 
 , # .
	! C
	
! 

 , # .
	! C
  !
	! 

J 
 ,
! C

!

 ,
	! C
* !
	! 

J 
 	!
(/ C
	!
(

 

 !
(/  C
	!
  !  
J 
 !
"#$ C
	!
!#" 

 	!
"#%$ C
	!
% ! 
$
 , # 
	! C
   !
	! 
 !
(/ C
	!
  ! 
JLK
 &
& C

 

  
, # 
	!
 !
(/ 

 &
& C
   !
  ! 
%
 ,
! C
% !
	! 
 &
& C
   !
  ! 
JLK
2&)(
&)( C

%

 
,
	!

&
& 

 & (
& ( C
  !
&   ! 
'
 .
	! C
   !
	! 
 !
"#%$ C
	!
% ! 
JLK

 C

 

  
.
	!
 !
"#$ 

 
 C
  !
% ! 
(
 
 C
  !
% ! 
 &)(
&)( C
%  !
  ! 
JLK
 
 C

%

   

 
& (
& ( 

 
 C
&   !
& * ! 
Figure 4: Possible sequence of inferences of
Parser C on input Wash the dishes / Pasudu moy.
When some of the component texts are missing,
we can ask the parser to infer a -dimensional
multitree that includes the missing components.
The resulting multitree will cover the W input
components/dimensions among its dimensions.
It will also express the  W output compo-
nents/dimensions, along with their syntactic struc-
tures.
Item Form:
 13

4
1) ! Goal: "
13
   $
 1) !
Inference Rules
Scan component 

&


W :
')(+*,,-
 1
/. 1

 10 1
) 2
 1
. 1
+  
  0 1
)
34
4
5
67
77
77
8
 1
. 1

  0 1
)
 ) 0 1
3
2
 1
/. 1

9

 

 10 1
)
: ;
;;
;;
<
Load component  ,
W X 

:
' (R*,,-
 ) 0 1
/. 1

 10 1
3 2
 ) 0 1
/. 1
*
 10 1
3
3 44
5
67
7777
8
 1)
 ) 0 1
/. 1

 10 1
3
2
 1)
: ;
;;;;
<
Compose:
= >@
BDC E
@
+ F
= H%@
BDC I
@
+F J K-,
M @
BDC .
1) U 4
1)
 ) 0 1
3
 >@
B
 H%@
B0/

 M @
B C E
@
+ S I
@
+

Figure 5: Logic CT (‚ÄúT‚Äù for Translation)
Figure 5 shows Logic CT, which is a generaliza-
tion of Logic C. Translator CT is any parser based
on Logic CT. The items of Translator CT have a
-dimensional label vector, as usual. However,
their d-span vectors are only W -dimensional, be-
cause it is not necessary to constrain absolute word
positions in the output dimensions. Instead, we need
only constrain the cardinality of the output nonter-
minals, which is accomplished by the role templates
 ) 0 1
3 in the 
& term. Translator CT scans only
the input components. Terminal productions with
active output components are simply loaded from
the grammar, and their LHSs are added to the chart
without d-span information. Composition proceeds
as before, except that there are no constraints on the
role templates in the output dimensions ‚Äì the role
templates in
 ) 0 1
3 are free variables.
In summary, Logic CT differs from Logic C as
follows:
1 Items store no position information (d-spans)
for the output components.
1 For the output components, the Scan infer-
ences are replaced by Load inferences, which
are not constrained by the input.
1 The Compose inference does not constrain the
d-spans of the output components. (Though it
still constrains their cardinality.)
We have constructed a translator from a syn-
chronous parser merely by relaxing some con-
straints on the output dimensions. Logic C is just
Logic CT for the special case where W . The
relationship between the two classes of algorithms
is easier to see from their declarative logics than it
would be from their procedural pseudocode or equa-
tions.
Like Parser C, Translator CT can Compose items
that have no dimensions in common. If one of the
items is active only in the input dimension(s), and
the other only in the output dimension(s), then the
inference is, de facto, a translation. The possible
translations are determined by consulting the gram-
mar. Thus, in addition to its usual function of eval-
uating syntactic structures, the grammar simultane-
ously functions as a translation model.
Logic CT can be coupled with any parsing semir-
ing. For example, under a boolean semiring, this
logic will succeed on an W -dimensional input if and
only if it can infer a -dimensional multitree whose
root is the goal item. Such a tree would contain a

 W

-dimensional translation of the input. Thus,
under a boolean semiring, Translator CT can deter-
mine whether a translation of the input exists.
Under an inside-probability semiring, Transla-
tor CT can compute the total probability of all mul-
titrees containing the input and its translations in the
AW output components. All these derivation trees,
along with their probabilities, can be efficiently rep-
resented as a packed parse forest, rooted at the goal
item. Unfortunately, finding the most probable out-
put string still requires summing probabilities over
an exponential number of trees. This problem was
shown to be NP-hard in the one-dimensional case
(Sima‚Äôan, 1996). We have no reason to believe that
it is any easier when
 
 .
The Viterbi-derivation semiring would be the
most often used with Translator CT in prac-
tice. Given a -PMTG, Translator CT can
use this semiring to find the single most prob-
able -dimensional multitree that covers the
W -dimensional input. The multitree inferred by the
translator will have the words of both the input and
the output components in its leaves. For example,
given a suitable grammar and the input Pasudu moy,
Translator CT could infer the multitree in Figure 2.
The set of inferences would be exactly the same as
those listed in Figure 4, except that the items would
have no d-spans in the English component.
In practice, we usually want the output as a string
tuple, rather than as a multitree. Under the vari-
ous derivation semirings (Goodman, 1999), Trans-
lator CT can store the output role templates
 ) 0 1
3 in
each internal node of the tree. The intended order-
ing of the terminals in each output dimension can be
assembled from these templates by a linear-time lin-
earization post-process that traverses the finished
multitree in postorder.
To the best of our knowledge, Logic CT is the first
published translation logic to be compatible with all
of the semirings catalogued by Goodman (1999),
among others. It is also the first to simultaneously
accommodate multiple input components and mul-
tiple output components. When a source docu-
ment is available in multiple languages, a translator
can benefit from the disambiguating information in
each. Translator CT can take advantage of such in-
formation without making the strong independence
assumptions of Och & Ney (2001). When output is
desired in multiple languages, Translator CT offers
all the putative benefits of the interlingual approach
to MT, including greater efficiency and greater con-
sistency across output components. Indeed, the lan-
guage of multitrees can be viewed as an interlingua.
5 Synchronization
We have explored inference of W -dimensional multi-
trees under a -dimensional grammar, where

W . Now we generalize along the other axis of
Figure 1(a). Multitext synchronization is most of-
ten used to infer W -dimensional multitrees without
the benefit of an W -dimensional grammar. One ap-
plication is inducing a parser in one language from a
parser in another (LuÃà et al., 2002). The application
that is most relevant to this paper is bootstrapping an
W -dimensional grammar. In theory, it is possible to
induce a PMTG from multitext in an unsupervised
manner. A more reliable way is to start from a
corpus of multitrees ‚Äî a multitreebank.3
We are not aware of any multitreebanks at this
time. The most straightforward way to create one is
to parse some multitext using a synchronous parser,
such as Parser C. However, if the goal is to boot-
strap an W -PMTG, then there is no W -PMTG that can
evaluate the 
 terms in the parser‚Äôs logic. Our solu-
tion is to orchestrate lower-dimensional knowledge
sources to evaluate the 
 terms. Then, we can use
the same parsing logic to synchronize multitext into
a multitreebank.
To illustrate, we describe a relatively simple syn-
chronizer, using the Viterbi-derivation semiring.4
Under this semiring, a synchronizer computes the
single most probable multitree for a given multitext.
3
In contrast, a parallel treebank might contain no informa-
tion about translational equivalence.
4
The inside-probability semiring would be required for
maximum-likelihood synchronization.
ya
kota
kormil
I fed the cat
Figure 6: Synchronization. Only one synchronous
dependency structure (dashed arrows) is compatible
with the monolingual structure (solid arrows) and
word alignment (shaded cells).
If we have no suitable PMTG, then we can use other
criteria to search for trees that have high probability.
We shall consider the common synchronization sce-
nario where a lexicalized monolingual grammar is
available for at least one component.5 Also, given
a tokenized set of W -tuples of parallel sentences,
it is always possible to estimate a word-to-word
translation model 
 3
1
 )
3 0 1

(e.g., Och & Ney,
2003).6
A word-to-word translation model and a lexical-
ized monolingual grammar are sufficient to drive a
synchronizer. For example, in Figure 6 a mono-
lingual grammar has allowed only one dependency
structure on the English side, and a word-to-word
translation model has allowed only one word align-
ment. The syntactic structures of all dimensions
of a multitree are isomorphic up to reordering of
sibling nodes and deletion. So, given a fixed cor-
respondence between the tree leaves (i.e. words)
across components, choosing the optimal structure
for one component is tantamount to choosing the
optimal synchronous structure for all components.7
Ignoring the nonterminal labels, only one depen-
dency structure is compatible with these constraints
‚Äì the one indicated by dashed arrows. Bootstrap-
ping a PMTG from a lower-dimensional PMTG and
a word-to-word translation model is similar in spirit
to the way that regular grammars can help to es-
timate CFGs (Lari & Young, 1990), and the way
that simple translation models can help to bootstrap
more sophisticated ones (Brown et al., 1993).
5
Such a grammar can be induced from a treebank, for exam-
ple. We are currently aware of treebanks for English, Spanish,
German, Chinese, Czech, Arabic, and Korean.
6
Although most of the literature discusses word transla-
tion models between only two languages, it is possible to
combine several 2D models into a higher-dimensional model
(Mann & Yarowsky, 2001).
7
Except where the unstructured components have words
that are linked to nothing.
We need only redefine the 
 terms in a way that
does not rely on an W -PMTG. Without loss of gener-
ality, we shall assume a -PMTG that ranges over
the first components, where X W . We shall
then refer to the structured components and the
W  unstructured components.
We begin with 
A . For the structured compo-
nents 

 


, we retain the grammar-
based definition: 
 
 
	

  


	

  

,8
where the latter probability can be looked up in
our -PMTG. For the unstructured components,
there are no useful nonterminal labels. Therefore,
we assume that the unstructured components use
only one (dummy) nonterminal label 
 , so that

R
 
	

  

 
 if
 
 and undefined oth-
erwise for X 

W .
Our treatment of nonterminal productions begins
by applying the chain rule9

&
 1)
	 1)
  1)
 
1
)
	 1)
  1)
	 1)


 1)
 1)
 
1
)
  1)  1)
 1)

(3)

 13  13  
1
3   13  1)
 1)

 
 3 0 1
)
  3 0 1
) 
 13  13  
1
3   13   1)
 1)

 
 3 0 1
) 
 13  13  
1
)
  1)
  1)
 1)

 
 3 0 1
) 
 13  1)
 
1
)
  1)
  1)
 1)

(4)
and continues by making independence assump-
tions. The first assumption is that the structured
components of the production‚Äôs RHS are condition-
ally independent of the unstructured components of
its LHS:

 13  13  
1
3   13  1)
 1)


 13  13  
1
3   13  13  13

(5)
The above probability can be looked up in the
-PMTG. Second, since we have no useful non-
terminals in the unstructured components, we let

 3 0 1
)
  3 0 1
) 
 13  13  
1
3   13   1)
 1)
 

(6)
if
 3 0 1
)
 3 0 1
) 

3 0 1
) and

otherwise. Third,
we assume that the word-to-word translation proba-
bilities are independent of anything else:

 3 0 1
) 
 13  13  
1
)
  1)
  1)
 1)


 3 0 1
) 
 13

(7)
8
We have ignored lexical heads so far, but we need them for
this synchronizer.
9
The procedure is analogous when the heir is the first non-
terminal link on the RHS, rather than the second.
These probabilities can be obtained from our word-
to-word translation model, which would typically
be estimated under exactly such an independence
assumption. Finally, we assume that the output role
templates are independent of each other and uni-
formly distributed, up to some maximum cardinal-
ity . Let 
 
be the number of unique role tem-
plates of cardinality or less. Then

 3 0 1
)
 
 13  1)
 
1
)
  1)
  1)
 1)

(8)

 3 0 1
)
 )

 3 0 1



  


  ) . 3
Under Assumptions 5‚Äì8,


 1)
	 1)
  1)
 
1
)
	 1)
  1)
	 1)

(9)


13
 13
 
1
3
  13  13
 13


 3 0 1
) 
 13


  ) . 3
if
 3 0 1
)
 3 0 1
) 

3 0 1
) and 0 otherwise. We
can use these definitions of the grammar terms in the
inference rules of Logic C to synchronize multitexts
into multitreebanks.
More sophisticated synchronization methods are
certainly possible. For example, we could project
a part-of-speech tagger (Yarowsky & Ngai, 2001)
to improve our estimates in Equation 6. Yet, de-
spite their relative simplicity, the above methods
for estimating production rule probabilities use all
of the available information in a consistent man-
ner, without double-counting. This kind of synchro-
nizer stands in contrast to more ad-hoc approaches
(e.g., Matsumoto, 1993; Meyers, 1996; Wu, 1998;
Hwa et al., 2002). Some of these previous works
fix the word alignments first, and then infer com-
patible parse structures. Others do the opposite. In-
formation about syntactic structure can be inferred
more accurately given information about transla-
tional equivalence, and vice versa. Commitment to
either kind of information without consideration of
the other increases the potential for compounded er-
rors.
6 Multitree-based Statistical MT
Multitree-based statistical machine translation
(MTSMT) is an architecture for SMT that revolves
around multitrees. Figure 7 shows how to build and
use a rudimentary MTSMT system, starting from
some multitext and one or more monolingual tree-
banks. The recipe follows:
T1. Induce a word-to-word translation model.
T2. Induce PCFGs from the relative frequencies of
productions in the monolingual treebanks.
T3. Synchronize some multitext, e.g. using the ap-
proximations in Section 5.
T4. Induce an initial PMTG from the relative fre-
quencies of productions in the multitreebank.
T5. Re-estimate the PMTG parameters, using a
synchronous parser with the expectation semir-
ing.
A1. Use the PMTG to infer the most probable mul-
titree covering new input text.
A2. Linearize the output dimensions of the multi-
tree.
Steps T2, T4 and A2 are trivial. Steps T1, T3, T5,
and A1 are instances of the generalized parsers de-
scribed in this paper.
Figure 7 is only an architecture. Computational
complexity and generalization error stand in the
way of its practical implementation. Nevertheless,
it is satisfying to note that all the non-trivial algo-
rithms in Figure 7 are special cases of Translator CT.
It is therefore possible to implement an MTSMT
system using just one inference algorithm, param-
eterized by a grammar, a semiring, and a search
strategy. An advantage of building an MT system in
this manner is that improvements invented for ordi-
nary parsing algorithms can often be applied to all
the main components of the system. For example,
Melamed (2003) showed how to reduce the com-
putational complexity of a synchronous parser by

 3 
, just by changing the logic. The same opti-
mization can be applied to the inference algorithms
in this paper. With proper software design, such op-
timizations need never be implemented more than
once. For simplicity, the algorithms in this paper
are based on CKY logic. However, the architecture
in Figure 7 can also be implemented using general-
izations of more sophisticated parsing logics, such
as those inherent in Earley or Head-Driven parsers.
7 Conclusion
This paper has presented generalizations of ordinary
parsing that emerge when the grammar and/or the
input can be multidimensional. Along the way, it
has elucidated the relationships between ordinary
parsers and other classes of algorithms, some pre-
viously known and some not. It turns out that, given
some multitext and a monolingual treebank, a rudi-
mentary multitree-based statistical machine transla-
tion system can be built and applied using only gen-
eralized parsers and some trivial glue.
There are three research benefits of using gener-
alized parsers to build MT systems. First, we can
synchronization
PCFG(s)
word‚àíto‚àíword
translation
model
parameter
parsing
synchronous
estimation via
PMTG
word
alignment
monolingual
treebank(s)
multitext
training
multitreebank
relative
frequency
computation
relative
frequency
computation
translation
input
multitext
multitree
output
multitext
linearization
A2
A1
T3
T5
T1
T2
T4
training
application
Figure 7: Data-flow diagram for a rudimentary MTSMT system based on generalizations of parsing.
take advantage of past and future research on mak-
ing parsers more accurate and more efficient. There-
fore, second, we can concentrate our efforts on
better models, without worrying about MT-specific
search algorithms. Third, more generally and most
importantly, this approach encourages MT research
to be less specialized and more transparently related
to the rest of computational linguistics.
Acknowledgments
Thanks to Joseph Turian, Wei Wang, Ben Wellington, and the
anonymous reviewers for valuable feedback. This research was
supported by an NSF CAREER Award, the DARPA TIDES
program, and an equipment gift from Sun Microsystems.
References
A. Aho & J. Ullman (1969) ‚ÄúSyntax Directed Translations and
the Pushdown Assembler,‚Äù Journal of Computer and System
Sciences 3, 37-56.
H. Alshawi, S. Bangalore, & S. Douglas (2000) ‚ÄúLearning De-
pendency Translation Models as Collections of Finite State
Head Transducers,‚Äù Computational Linguistics 26(1):45-60.
P. F. Brown, S. A. Della Pietra, V. J. Della Pietra, & R. L. Mer-
cer (1993) ‚ÄúThe Mathematics of Statistical Machine Trans-
lation: Parameter Estimation,‚Äù Computational Linguistics
19(2):263‚Äì312.
J. Goodman (1999) ‚ÄúSemiring Parsing,‚Äù Computational Lin-
guistics 25(4):573‚Äì305.
R. Hwa, P. Resnik, A. Weinberg, & O. Kolak (2002) ‚ÄúEvaluat-
ing Translational Correspondence using Annotation Projec-
tion,‚Äù Proceedings of the ACL.
J. Eisner (2002) ‚ÄúParameter Estimation for Probabilistic Finite-
State Transducers,‚Äù Proceedings of the ACL.
K. Lari & S. Young (1990) ‚ÄúThe Estimation of Stochas-
tic Context-Free Grammars using the Inside-Outside Algo-
rithm,‚Äù Computer Speech and Language Processing 4:35‚Äì
56.
Y. LuÃà, S. Li, T. Zhao, & M. Yang (2002) ‚ÄúLearning Chinese
Bracketing Knowledge Based on a Bilingual Language
Model,‚Äù Proceedings of COLING.
G. S. Mann & D. Yarowsky (2001) ‚ÄúMultipath Translation
Lexicon Induction via Bridge Languages,‚Äù Proceedings of
HLT/NAACL.
Y. Matsumoto (1993) ‚ÄúStructural Matching of Parallel Texts,‚Äù
Proceedings of the ACL.
I. D. Melamed (2003) ‚ÄúMultitext Grammars and Synchronous
Parsers,‚Äù Proceedings of HLT/NAACL.
I. D. Melamed, G. Satta, & B. Wellington (2004) ‚ÄúGeneral-
ized Multitext Grammars,‚Äù Proceedings of the ACL (this
volume).
A. Meyers, R. Yangarber, & R. Grishman (1996) ‚ÄúAlignment of
Shared Forests for Bilingual Corpora,‚Äù Proceedings of COL-
ING.
F. Och & H. Ney (2001) ‚ÄúStatistical Multi-Source Translation,‚Äù
Proceedings of MT Summit VIII.
F. Och & H. Ney (2003) ‚ÄúA Systematic Comparison of Various
Statistical Alignment Models,‚Äù Computational Linguistics
29(1):19-51.
K. Sima‚Äôan (1996) ‚ÄúComputational Complexity of Probabilis-
tic Disambiguation by means of Tree-Grammars,‚Äù Proceed-
ings of COLING.
D. Wu (1996) ‚ÄúA polynomial-time algorithm for statistical ma-
chine translation,‚Äù Proceedings of the ACL.
D. Wu (1997) ‚ÄúStochastic inversion transduction grammars and
bilingual parsing of parallel corpora,‚Äù Computational Lin-
guistics 23(3):377-404.
D. Wu & H. Wong (1998) ‚ÄúMachine translation with a stochas-
tic grammatical channel,‚Äù Proceedings of the ACL.
K. Yamada & K. Knight (2002) ‚ÄúA Decoder for Syntax-based
Statistical MT,‚Äù Proceedings of the ACL.
D. Yarowsky & G. Ngai (2001) ‚ÄúInducing Multilingual POS
Taggers and NP Bracketers via Robust Projection Across
Aligned Corpora,‚Äù Proceedings of the NAACL.
